{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "/home/am-rutherford/repos/pymarl/src",
    "dependencies": [
      "munch==2.5.1.dev12",
      "numpy==1.20.3",
      "PyYAML==6.0",
      "sacred==0.7.2",
      "torch==1.10.2"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [],
    "sources": [
      [
        "main.py",
        "_sources/main_638d691883a1dd260422c9ea347f1cfb.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"/home/am-rutherford/anaconda3/envs/pymarl/lib/python3.7/site-packages/sacred-0.7.2-py3.7.egg/sacred/config/captured_function.py\", line 48, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"src/main.py\", line 42, in my_main\n    run(_run, config, _log)\n",
    "  File \"/home/am-rutherford/repos/pymarl/src/run.py\", line 47, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"/home/am-rutherford/repos/pymarl/src/run.py\", line 221, in run_sequential\n    logger.print_recent_stats()\n",
    "  File \"/home/am-rutherford/repos/pymarl/src/utils/logging.py\", line 48, in print_recent_stats\n    item = \"{:.4f}\".format(np.mean([x[1] for x in self.stats[k][-window:]]))\n",
    "  File \"<__array_function__ internals>\", line 6, in mean\n",
    "  File \"/home/am-rutherford/anaconda3/envs/pymarl/lib/python3.7/site-packages/numpy/core/fromnumeric.py\", line 3420, in mean\n    out=out, **kwargs)\n",
    "  File \"/home/am-rutherford/anaconda3/envs/pymarl/lib/python3.7/site-packages/numpy/core/_methods.py\", line 162, in _mean\n    arr = asanyarray(a)\n",
    "  File \"/home/am-rutherford/anaconda3/envs/pymarl/lib/python3.7/site-packages/numpy/core/_asarray.py\", line 171, in asanyarray\n    return array(a, dtype, copy=False, order=order, subok=True)\n",
    "  File \"/home/am-rutherford/anaconda3/envs/pymarl/lib/python3.7/site-packages/torch/_tensor.py\", line 643, in __array__\n    return self.numpy()\n",
    "TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.\n"
  ],
  "heartbeat": "2022-03-03T00:18:09.072529",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz",
    "gpus": {
      "driver_version": "510.54",
      "gpus": [
        {
          "model": "NVIDIA GeForce GTX 1070",
          "persistence_mode": false,
          "total_memory": 8192
        }
      ]
    },
    "hostname": "fortinbras",
    "os": [
      "Linux",
      "Linux-5.4.0-100-generic-x86_64-with-debian-bullseye-sid"
    ],
    "python_version": "3.7.11"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat_interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print_config": false,
      "--priority": null,
      "--queue": false,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [],
      "help": false,
      "with": false
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2022-03-03T00:16:18.432742",
  "status": "FAILED",
  "stop_time": "2022-03-03T00:18:09.074515"
}