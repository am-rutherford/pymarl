[INFO 11:00:08] pymarl Running command 'my_main'
[INFO 11:00:08] pymarl Started run with ID "235"
[DEBUG 11:00:08] pymarl Starting Heartbeat
[DEBUG 11:00:08] my_main Started
[WARNING 11:00:08] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 11:00:08] my_main Experiment Parameters:
[INFO 11:00:08] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '/Users/alexrutherford/repos/pymarl/results/models/qmix_bruno',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'camas',
    'env_args': {   'debug': False,
                    'goal_reward': 0,
                    'map_name': 'bruno',
                    'observation_type': 'global',
                    'ptd_mean': 1.0,
                    'ptd_var': 0.1,
                    'reward_scaling_factor': 100,
                    'seed': 608199642,
                    'time_multiplier': 1},
    'epsilon_anneal_time': 500000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'render',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 608199642,
    't_max': 1100000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': False,
    'use_tensorboard': False}

*** Creating Camas Zoo Env ***
Map parameters: {'episode_timestep_limit': 50, 'initial': {'agent_0': ('n_1_0', 'n_1_3'), 'agent_1': ('n_1_0', 'n_1_3'), 'agent_2': ('n_1_3', 'n_1_0')}, 'anna_map': False}
[DEBUG 11:00:08] root Connecting n_0_0 to n_0_1 with n_0_0_n_0_1
[DEBUG 11:00:08] root Connecting n_0_0 to n_1_0 with n_0_0_n_1_0
[DEBUG 11:00:08] root Connecting n_0_1 to n_0_2 with n_0_1_n_0_2
[DEBUG 11:00:08] root Connecting n_0_1 to n_0_0 with n_0_1_n_0_0
[DEBUG 11:00:08] root Connecting n_0_2 to n_0_3 with n_0_2_n_0_3
[DEBUG 11:00:08] root Connecting n_0_2 to n_0_1 with n_0_2_n_0_1
[DEBUG 11:00:08] root Connecting n_0_3 to n_0_2 with n_0_3_n_0_2
[DEBUG 11:00:08] root Connecting n_0_3 to n_1_3 with n_0_3_n_1_3
[DEBUG 11:00:08] root Connecting n_1_0 to n_1_1 with n_1_0_n_1_1
[DEBUG 11:00:08] root Connecting n_1_0 to n_0_0 with n_1_0_n_0_0
[DEBUG 11:00:08] root Connecting n_1_0 to n_2_0 with n_1_0_n_2_0
[DEBUG 11:00:08] root Connecting n_1_1 to n_1_2 with n_1_1_n_1_2
[DEBUG 11:00:08] root Connecting n_1_1 to n_1_0 with n_1_1_n_1_0
[DEBUG 11:00:08] root Connecting n_1_2 to n_1_3 with n_1_2_n_1_3
[DEBUG 11:00:08] root Connecting n_1_2 to n_1_1 with n_1_2_n_1_1
[DEBUG 11:00:08] root Connecting n_1_3 to n_1_2 with n_1_3_n_1_2
[DEBUG 11:00:08] root Connecting n_1_3 to n_0_3 with n_1_3_n_0_3
[DEBUG 11:00:08] root Connecting n_1_3 to n_2_3 with n_1_3_n_2_3
[DEBUG 11:00:08] root Connecting n_2_0 to n_2_1 with n_2_0_n_2_1
[DEBUG 11:00:08] root Connecting n_2_0 to n_1_0 with n_2_0_n_1_0
[DEBUG 11:00:08] root Connecting n_2_1 to n_2_2 with n_2_1_n_2_2
[DEBUG 11:00:08] root Connecting n_2_1 to n_2_0 with n_2_1_n_2_0
[DEBUG 11:00:08] root Connecting n_2_2 to n_2_3 with n_2_2_n_2_3
[DEBUG 11:00:08] root Connecting n_2_2 to n_2_1 with n_2_2_n_2_1
[DEBUG 11:00:08] root Connecting n_2_3 to n_2_2 with n_2_3_n_2_2
[DEBUG 11:00:08] root Connecting n_2_3 to n_1_3 with n_2_3_n_1_3
Possible agents ['agent_0', 'agent_1', 'agent_2']
[DEBUG 11:00:08] my_main Buffer scheme: {'state': {'vshape': (3,)}, 'obs': {'vshape': 3, 'group': 'agents'}, 'actions': {'vshape': (1,), 'group': 'agents', 'dtype': torch.int64}, 'avail_actions': {'vshape': (5,), 'group': 'agents', 'dtype': torch.int32}, 'reward': {'vshape': (1,)}, 'terminated': {'vshape': (1,), 'dtype': torch.uint8}}, groups: {'agents': 3}
[INFO 11:00:08] my_main Loading model from /Users/alexrutherford/repos/pymarl/results/models/qmix_bruno/250023
[INFO 11:00:08] my_main Beginning training for 1100000 timesteps
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /Users/runner/miniforge3/conda-bld/pytorch-recipe_1643121251270/work/torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
events [('congestion', 0.0, 'agent_0', 'n_1_0_n_1_1', 0, 0), ('congestion', 0.0, 'agent_1', 'n_1_0_n_2_0', 0, 0), ('congestion', 0.0, 'agent_2', 'n_1_3_n_0_3', 0, 0), ('location', 2.0383691749039063, 'agent_2', 'n_0_3'), ('congestion', 2.0383691749039063, 'agent_2', 'n_0_3_n_0_2', 0, 0), ('location', 2.62065657973498, 'agent_1', 'n_2_0'), ('congestion', 2.62065657973498, 'agent_1', 'n_2_0_n_2_1', 0, 0), ('location', 3.4768811310755097, 'agent_0', 'n_1_1'), ('congestion', 3.4768811310755097, 'agent_0', 'n_1_1_n_1_2', 0, 0), ('location', 4.309423201646687, 'agent_2', 'n_0_2'), ('congestion', 4.309423201646687, 'agent_2', 'n_0_2_n_0_3', 0, 0), ('location', 5.316022715104089, 'agent_1', 'n_2_1'), ('congestion', 5.31602271510409, 'agent_1', 'n_2_1_n_2_2', 0, 0), ('location', 5.819185774749041, 'agent_2', 'n_0_3'), ('congestion', 5.819185774749041, 'agent_2', 'n_0_3_n_1_3', 0, 0), ('location', 7.163007002943402, 'agent_0', 'n_1_2'), ('congestion', 7.163007002943402, 'agent_0', 'n_1_2_n_1_3', 1, 1), ('location', 7.949474301323266, 'agent_1', 'n_2_2'), ('congestion', 7.949474301323266, 'agent_1', 'n_2_2_n_2_3', 0, 0), ('location', 10.004603499548672, 'agent_2', 'n_1_3'), ('congestion', 10.004603499548672, 'agent_2', 'n_1_3_n_1_2', 1, 1), ('location', 10.052231605562936, 'agent_1', 'n_2_3'), ('congestion', 10.052231605562936, 'agent_1', 'n_2_3_n_1_3', 1, 1), ('location', 15.498582488396924, 'agent_2', 'n_1_2'), ('congestion', 15.498582488396924, 'agent_2', 'n_1_2_n_1_3', 2, 2), ('location', 19.647800386976122, 'agent_0', 'n_1_3'), ('location', 19.647800386976126, 'agent_0', 'Agent reached goal'), ('location', 23.266377922063434, 'agent_1', 'n_1_3'), ('location', 23.266377922063437, 'agent_1', 'Agent reached goal'), ('location', 27.692924484544278, 'agent_2', 'n_1_3'), ('congestion', 27.692924484544278, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 29.946173742436752, 'agent_2', 'n_2_3'), ('congestion', 29.946173742436752, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 32.15340674163995, 'agent_2', 'n_2_2'), ('congestion', 32.15340674163995, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 34.30076997064963, 'agent_2', 'n_2_3'), ('congestion', 34.30076997064963, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 36.22399621770783, 'agent_2', 'n_1_3'), ('congestion', 36.22399621770783, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 37.78909141465646, 'agent_2', 'n_2_3'), ('congestion', 37.78909141465646, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 39.557349876160984, 'agent_2', 'n_2_2'), ('congestion', 39.557349876160984, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 45.40046671584003, 'agent_2', 'n_2_3'), ('congestion', 45.40046671584004, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 48.71271141168937, 'agent_2', 'n_1_3'), ('congestion', 48.71271141168937, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 52.19565442523232, 'agent_2', 'n_2_3'), ('congestion', 52.19565442523232, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 56.440198505580426, 'agent_2', 'n_2_2'), ('congestion', 56.440198505580426, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 60.25741916375167, 'agent_2', 'n_2_3'), ('congestion', 60.25741916375167, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 62.073149347609174, 'agent_2', 'n_1_3'), ('congestion', 62.073149347609174, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 63.9160125938636, 'agent_2', 'n_2_3'), ('congestion', 63.916012593863606, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 66.57374814186912, 'agent_2', 'n_2_2'), ('congestion', 66.57374814186912, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 69.78634607672004, 'agent_2', 'n_2_3'), ('congestion', 69.78634607672004, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 72.21178768610528, 'agent_2', 'n_1_3'), ('congestion', 72.2117876861053, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 74.72182841838404, 'agent_2', 'n_2_3'), ('congestion', 74.72182841838405, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 76.43737958843998, 'agent_2', 'n_2_2'), ('congestion', 76.43737958843998, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 78.6128463993445, 'agent_2', 'n_2_3'), ('congestion', 78.6128463993445, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 81.62191850172712, 'agent_2', 'n_1_3'), ('congestion', 81.62191850172712, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 84.21335494840926, 'agent_2', 'n_2_3'), ('congestion', 84.21335494840926, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 87.5943479915141, 'agent_2', 'n_2_2'), ('congestion', 87.5943479915141, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 89.40182593369556, 'agent_2', 'n_2_3'), ('congestion', 89.40182593369556, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 91.85238993024099, 'agent_2', 'n_1_3'), ('congestion', 91.85238993024099, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 95.03536296027175, 'agent_2', 'n_2_3'), ('congestion', 95.03536296027175, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 96.47511572052444, 'agent_2', 'n_2_2'), ('congestion', 96.47511572052444, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 99.44317263832366, 'agent_2', 'n_2_3'), ('congestion', 99.44317263832366, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 102.96105474797251, 'agent_2', 'n_1_3'), ('congestion', 102.96105474797251, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 105.7154281963512, 'agent_2', 'n_2_3'), ('congestion', 105.7154281963512, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 108.81292392501905, 'agent_2', 'n_2_2'), ('congestion', 108.81292392501905, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('location', 112.9617264406227, 'agent_2', 'n_2_3'), ('congestion', 112.9617264406227, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('location', 115.0787860889849, 'agent_2', 'n_1_3'), ('congestion', 115.07878608898488, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('location', 118.58913311951054, 'agent_2', 'n_2_3'), ('congestion', 118.58913311951054, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('location', 120.76207345914256, 'agent_2', 'n_2_2')]
len 98
aevents {'agent_0': [('congestion', 0.0, 'agent_0', 'n_1_0_n_1_1', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9e50>, 3.4768811310755097), ('congestion', 3.4768811310755097, 'agent_0', 'n_1_1_n_1_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9250>, 7.163007002943402), ('congestion', 7.163007002943402, 'agent_0', 'n_1_2_n_1_3', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 19.647800386976122)], 'agent_1': [('congestion', 0.0, 'agent_1', 'n_1_0_n_2_0', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9ad0>, 2.62065657973498), ('congestion', 2.62065657973498, 'agent_1', 'n_2_0_n_2_1', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9550>, 5.316022715104089), ('congestion', 5.31602271510409, 'agent_1', 'n_2_1_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 7.949474301323266), ('congestion', 7.949474301323266, 'agent_1', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 10.052231605562936), ('congestion', 10.052231605562936, 'agent_1', 'n_2_3_n_1_3', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 23.266377922063434)], 'agent_2': [('congestion', 0.0, 'agent_2', 'n_1_3_n_0_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f3410>, 2.0383691749039063), ('congestion', 2.0383691749039063, 'agent_2', 'n_0_3_n_0_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f37d0>, 4.309423201646687), ('congestion', 4.309423201646687, 'agent_2', 'n_0_2_n_0_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f3410>, 5.819185774749041), ('congestion', 5.819185774749041, 'agent_2', 'n_0_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 10.004603499548672), ('congestion', 10.004603499548672, 'agent_2', 'n_1_3_n_1_2', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9250>, 15.498582488396924), ('congestion', 15.498582488396924, 'agent_2', 'n_1_2_n_1_3', 2, 2), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 27.692924484544278), ('congestion', 27.692924484544278, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 29.946173742436752), ('congestion', 29.946173742436752, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 32.15340674163995), ('congestion', 32.15340674163995, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 34.30076997064963), ('congestion', 34.30076997064963, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 36.22399621770783), ('congestion', 36.22399621770783, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 37.78909141465646), ('congestion', 37.78909141465646, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 39.557349876160984), ('congestion', 39.557349876160984, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 45.40046671584003), ('congestion', 45.40046671584004, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 48.71271141168937), ('congestion', 48.71271141168937, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 52.19565442523232), ('congestion', 52.19565442523232, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 56.440198505580426), ('congestion', 56.440198505580426, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 60.25741916375167), ('congestion', 60.25741916375167, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 62.073149347609174), ('congestion', 62.073149347609174, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 63.9160125938636), ('congestion', 63.916012593863606, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 66.57374814186912), ('congestion', 66.57374814186912, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 69.78634607672004), ('congestion', 69.78634607672004, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 72.21178768610528), ('congestion', 72.2117876861053, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 74.72182841838404), ('congestion', 74.72182841838405, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 76.43737958843998), ('congestion', 76.43737958843998, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 78.6128463993445), ('congestion', 78.6128463993445, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 81.62191850172712), ('congestion', 81.62191850172712, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 84.21335494840926), ('congestion', 84.21335494840926, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 87.5943479915141), ('congestion', 87.5943479915141, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 89.40182593369556), ('congestion', 89.40182593369556, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 91.85238993024099), ('congestion', 91.85238993024099, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 95.03536296027175), ('congestion', 95.03536296027175, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 96.47511572052444), ('congestion', 96.47511572052444, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 99.44317263832366), ('congestion', 99.44317263832366, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 102.96105474797251), ('congestion', 102.96105474797251, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 105.7154281963512), ('congestion', 105.7154281963512, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 108.81292392501905), ('congestion', 108.81292392501905, 'agent_2', 'n_2_2_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 112.9617264406227), ('congestion', 112.9617264406227, 'agent_2', 'n_2_3_n_1_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf6f9750>, 115.0787860889849), ('congestion', 115.07878608898488, 'agent_2', 'n_1_3_n_2_3', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763310>, 118.58913311951054), ('congestion', 118.58913311951054, 'agent_2', 'n_2_3_n_2_2', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fc7cf763250>, 120.76207345914256)]}
...frames: 1770...
[DEBUG 11:00:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:08] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 11:00:08] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 11:00:08] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 11:00:08] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 11:00:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:22] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:23] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:24] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:25] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:26] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:27] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:28] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:29] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:00:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 11:01:08] matplotlib.axes._base top of axes not in the figure, so title not moved
