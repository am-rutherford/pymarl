[INFO 15:48:21] pymarl Running command 'my_main'
[INFO 15:48:21] pymarl Started run with ID "273"
[DEBUG 15:48:21] pymarl Starting Heartbeat
[DEBUG 15:48:21] my_main Started
[WARNING 15:48:21] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 15:48:21] my_main Experiment Parameters:
[INFO 15:48:21] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': 'results/models/qmix__2022-02-28_00-02-36',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'camas',
    'env_args': {   'debug': False,
                    'goal_reward': 0,
                    'map_name': 'grid-small',
                    'observation_type': 'global',
                    'ptd_mean': 1.0,
                    'ptd_var': 0.1,
                    'reward_scaling_factor': 100,
                    'seed': 589116125,
                    'time_multiplier': 1},
    'epsilon_anneal_time': 500000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'render',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 589116125,
    't_max': 5100000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': False,
    'use_tensorboard': True}

[DEBUG 15:48:26] tensorflow Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
[DEBUG 15:48:26] h5py._conv Creating converter from 7 to 5
[DEBUG 15:48:26] h5py._conv Creating converter from 5 to 7
[DEBUG 15:48:26] h5py._conv Creating converter from 7 to 5
[DEBUG 15:48:26] h5py._conv Creating converter from 5 to 7
[DEBUG 15:48:27] my_main Rendering runner initialised
*** Creating Camas Zoo Env ***
Map parameters: {'episode_timestep_limit': 500, 'max_agents': 5, 'initial': {'agent_0': ('(3, 4)', '(4, 2)'), 'agent_1': ('(4, 1)', '(4, 4)'), 'agent_2': ('(0, 4)', '(2, 0)'), 'agent_3': ('(1, 1)', '(2, 2)'), 'agent_4': ('(2, 1)', '(3, 3)')}, 'generator': 'grid', 'size': (5, 5), 'anna_map': True}
[DEBUG 15:48:27] root Connecting (0, 0) to (0, 1) with e_(0, 0)_(0, 1)
[DEBUG 15:48:27] root Connecting (0, 0) to (1, 0) with e_(0, 0)_(1, 0)
[DEBUG 15:48:27] root Connecting (0, 1) to (0, 0) with e_(0, 1)_(0, 0)
[DEBUG 15:48:27] root Connecting (0, 1) to (0, 2) with e_(0, 1)_(0, 2)
[DEBUG 15:48:27] root Connecting (0, 1) to (1, 1) with e_(0, 1)_(1, 1)
[DEBUG 15:48:27] root Connecting (0, 2) to (0, 1) with e_(0, 2)_(0, 1)
[DEBUG 15:48:27] root Connecting (0, 2) to (0, 3) with e_(0, 2)_(0, 3)
[DEBUG 15:48:27] root Connecting (0, 2) to (1, 2) with e_(0, 2)_(1, 2)
[DEBUG 15:48:27] root Connecting (0, 3) to (0, 2) with e_(0, 3)_(0, 2)
[DEBUG 15:48:27] root Connecting (0, 3) to (0, 4) with e_(0, 3)_(0, 4)
[DEBUG 15:48:27] root Connecting (0, 3) to (1, 3) with e_(0, 3)_(1, 3)
[DEBUG 15:48:27] root Connecting (0, 4) to (0, 3) with e_(0, 4)_(0, 3)
[DEBUG 15:48:27] root Connecting (0, 4) to (1, 4) with e_(0, 4)_(1, 4)
[DEBUG 15:48:27] root Connecting (1, 0) to (0, 0) with e_(1, 0)_(0, 0)
[DEBUG 15:48:27] root Connecting (1, 0) to (1, 1) with e_(1, 0)_(1, 1)
[DEBUG 15:48:27] root Connecting (1, 0) to (2, 0) with e_(1, 0)_(2, 0)
[DEBUG 15:48:27] root Connecting (1, 1) to (0, 1) with e_(1, 1)_(0, 1)
[DEBUG 15:48:27] root Connecting (1, 1) to (1, 0) with e_(1, 1)_(1, 0)
[DEBUG 15:48:27] root Connecting (1, 1) to (1, 2) with e_(1, 1)_(1, 2)
[DEBUG 15:48:27] root Connecting (1, 1) to (2, 1) with e_(1, 1)_(2, 1)
[DEBUG 15:48:27] root Connecting (1, 2) to (0, 2) with e_(1, 2)_(0, 2)
[DEBUG 15:48:27] root Connecting (1, 2) to (1, 1) with e_(1, 2)_(1, 1)
[DEBUG 15:48:27] root Connecting (1, 2) to (1, 3) with e_(1, 2)_(1, 3)
[DEBUG 15:48:27] root Connecting (1, 2) to (2, 2) with e_(1, 2)_(2, 2)
[DEBUG 15:48:27] root Connecting (1, 3) to (0, 3) with e_(1, 3)_(0, 3)
[DEBUG 15:48:27] root Connecting (1, 3) to (1, 2) with e_(1, 3)_(1, 2)
[DEBUG 15:48:27] root Connecting (1, 3) to (1, 4) with e_(1, 3)_(1, 4)
[DEBUG 15:48:27] root Connecting (1, 3) to (2, 3) with e_(1, 3)_(2, 3)
[DEBUG 15:48:27] root Connecting (1, 4) to (0, 4) with e_(1, 4)_(0, 4)
[DEBUG 15:48:27] root Connecting (1, 4) to (1, 3) with e_(1, 4)_(1, 3)
[DEBUG 15:48:27] root Connecting (1, 4) to (2, 4) with e_(1, 4)_(2, 4)
[DEBUG 15:48:27] root Connecting (2, 0) to (1, 0) with e_(2, 0)_(1, 0)
[DEBUG 15:48:27] root Connecting (2, 0) to (2, 1) with e_(2, 0)_(2, 1)
[DEBUG 15:48:27] root Connecting (2, 0) to (3, 0) with e_(2, 0)_(3, 0)
[DEBUG 15:48:27] root Connecting (2, 1) to (1, 1) with e_(2, 1)_(1, 1)
[DEBUG 15:48:27] root Connecting (2, 1) to (2, 0) with e_(2, 1)_(2, 0)
[DEBUG 15:48:27] root Connecting (2, 1) to (2, 2) with e_(2, 1)_(2, 2)
[DEBUG 15:48:27] root Connecting (2, 1) to (3, 1) with e_(2, 1)_(3, 1)
[DEBUG 15:48:27] root Connecting (2, 2) to (1, 2) with e_(2, 2)_(1, 2)
[DEBUG 15:48:27] root Connecting (2, 2) to (2, 1) with e_(2, 2)_(2, 1)
[DEBUG 15:48:27] root Connecting (2, 2) to (2, 3) with e_(2, 2)_(2, 3)
[DEBUG 15:48:27] root Connecting (2, 2) to (3, 2) with e_(2, 2)_(3, 2)
[DEBUG 15:48:27] root Connecting (2, 3) to (1, 3) with e_(2, 3)_(1, 3)
[DEBUG 15:48:27] root Connecting (2, 3) to (2, 2) with e_(2, 3)_(2, 2)
[DEBUG 15:48:27] root Connecting (2, 3) to (2, 4) with e_(2, 3)_(2, 4)
[DEBUG 15:48:27] root Connecting (2, 3) to (3, 3) with e_(2, 3)_(3, 3)
[DEBUG 15:48:27] root Connecting (2, 4) to (1, 4) with e_(2, 4)_(1, 4)
[DEBUG 15:48:27] root Connecting (2, 4) to (2, 3) with e_(2, 4)_(2, 3)
[DEBUG 15:48:27] root Connecting (2, 4) to (3, 4) with e_(2, 4)_(3, 4)
[DEBUG 15:48:27] root Connecting (3, 0) to (2, 0) with e_(3, 0)_(2, 0)
[DEBUG 15:48:27] root Connecting (3, 0) to (3, 1) with e_(3, 0)_(3, 1)
[DEBUG 15:48:27] root Connecting (3, 0) to (4, 0) with e_(3, 0)_(4, 0)
[DEBUG 15:48:27] root Connecting (3, 1) to (2, 1) with e_(3, 1)_(2, 1)
[DEBUG 15:48:27] root Connecting (3, 1) to (3, 0) with e_(3, 1)_(3, 0)
[DEBUG 15:48:27] root Connecting (3, 1) to (3, 2) with e_(3, 1)_(3, 2)
[DEBUG 15:48:27] root Connecting (3, 1) to (4, 1) with e_(3, 1)_(4, 1)
[DEBUG 15:48:27] root Connecting (3, 2) to (2, 2) with e_(3, 2)_(2, 2)
[DEBUG 15:48:27] root Connecting (3, 2) to (3, 1) with e_(3, 2)_(3, 1)
[DEBUG 15:48:27] root Connecting (3, 2) to (3, 3) with e_(3, 2)_(3, 3)
[DEBUG 15:48:27] root Connecting (3, 2) to (4, 2) with e_(3, 2)_(4, 2)
[DEBUG 15:48:27] root Connecting (3, 3) to (2, 3) with e_(3, 3)_(2, 3)
[DEBUG 15:48:27] root Connecting (3, 3) to (3, 2) with e_(3, 3)_(3, 2)
[DEBUG 15:48:27] root Connecting (3, 3) to (3, 4) with e_(3, 3)_(3, 4)
[DEBUG 15:48:27] root Connecting (3, 3) to (4, 3) with e_(3, 3)_(4, 3)
[DEBUG 15:48:27] root Connecting (3, 4) to (2, 4) with e_(3, 4)_(2, 4)
[DEBUG 15:48:27] root Connecting (3, 4) to (3, 3) with e_(3, 4)_(3, 3)
[DEBUG 15:48:27] root Connecting (3, 4) to (4, 4) with e_(3, 4)_(4, 4)
[DEBUG 15:48:27] root Connecting (4, 0) to (3, 0) with e_(4, 0)_(3, 0)
[DEBUG 15:48:27] root Connecting (4, 0) to (4, 1) with e_(4, 0)_(4, 1)
[DEBUG 15:48:27] root Connecting (4, 1) to (3, 1) with e_(4, 1)_(3, 1)
[DEBUG 15:48:27] root Connecting (4, 1) to (4, 0) with e_(4, 1)_(4, 0)
[DEBUG 15:48:27] root Connecting (4, 1) to (4, 2) with e_(4, 1)_(4, 2)
[DEBUG 15:48:27] root Connecting (4, 2) to (3, 2) with e_(4, 2)_(3, 2)
[DEBUG 15:48:27] root Connecting (4, 2) to (4, 1) with e_(4, 2)_(4, 1)
[DEBUG 15:48:27] root Connecting (4, 2) to (4, 3) with e_(4, 2)_(4, 3)
[DEBUG 15:48:27] root Connecting (4, 3) to (3, 3) with e_(4, 3)_(3, 3)
[DEBUG 15:48:27] root Connecting (4, 3) to (4, 2) with e_(4, 3)_(4, 2)
[DEBUG 15:48:27] root Connecting (4, 3) to (4, 4) with e_(4, 3)_(4, 4)
[DEBUG 15:48:27] root Connecting (4, 4) to (3, 4) with e_(4, 4)_(3, 4)
[DEBUG 15:48:27] root Connecting (4, 4) to (4, 3) with e_(4, 4)_(4, 3)
Possible agents ['agent_0', 'agent_1', 'agent_2', 'agent_3', 'agent_4']
Goal states {'agent_0': '(4, 2)', 'agent_1': '(4, 4)', 'agent_2': '(2, 0)', 'agent_3': '(2, 2)', 'agent_4': '(3, 3)'} 
Initial states {'agent_0': '(3, 4)', 'agent_1': '(4, 1)', 'agent_2': '(0, 4)', 'agent_3': '(1, 1)', 'agent_4': '(2, 1)'}
[DEBUG 15:48:27] my_main Buffer scheme: {'state': {'vshape': (5,)}, 'obs': {'vshape': 5, 'group': 'agents'}, 'actions': {'vshape': (1,), 'group': 'agents', 'dtype': torch.int64}, 'avail_actions': {'vshape': (5,), 'group': 'agents', 'dtype': torch.int32}, 'reward': {'vshape': (1,)}, 'terminated': {'vshape': (1,), 'dtype': torch.uint8}}, groups: {'agents': 5}
timesteps [3000918, 1000328, 500259, 2500872, 2000754, 223, 1500728, 4001118, 3501011]
[INFO 15:48:28] my_main Loading model from results/models/qmix__2022-02-28_00-02-36/4001118
[INFO 15:48:28] my_main Beginning training for 5100000 timesteps
*** reset environment ***
-- step 1 
State: [0.18095238 0.2        0.03809524 0.05714286 0.1047619 ], Agent: agent_0, Time: 0.0
Pre transition data: {'state': [array([0.18095238, 0.2       , 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.18095238, 0.2       , 0.03809524, 0.05714286, 0.1047619 ],
       [0.2       , 0.18095238, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.18095238, 0.2       , 0.05714286, 0.1047619 ],
       [0.05714286, 0.18095238, 0.2       , 0.03809524, 0.1047619 ],
       [0.1047619 , 0.18095238, 0.2       , 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /Users/runner/miniforge3/conda-bld/pytorch-recipe_1643121251270/work/torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
Actions: tensor([[0, 4, 4, 4, 4]])
Reward -0.0, Time 0.0
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
-- step 2 
State: [0.86666667 0.2        0.03809524 0.05714286 0.1047619 ], Agent: agent_1, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.2       , 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.2       , 0.03809524, 0.05714286, 0.1047619 ],
       [0.2       , 0.86666667, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.86666667, 0.2       , 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.2       , 0.03809524, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.2       , 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 4, 4, 4]])
Reward -0.0, Time 0.0
-- step 3 
State: [0.86666667 0.91428571 0.03809524 0.05714286 0.1047619 ], Agent: agent_2, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.03809524, 0.05714286, 0.1047619 ],
       [0.91428571, 0.86666667, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.86666667, 0.91428571, 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.91428571, 0.03809524, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 0, 4, 4]])
Reward -0.0, Time 0.0
-- step 4 
State: [0.86666667 0.91428571 0.35238095 0.05714286 0.1047619 ], Agent: agent_3, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.05714286, 0.1047619 ],
       [0.91428571, 0.86666667, 0.35238095, 0.05714286, 0.1047619 ],
       [0.35238095, 0.86666667, 0.91428571, 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.91428571, 0.35238095, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.35238095, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 0, 0, 4]])
Reward -0.0, Time 0.0
-- step 5 
State: [0.86666667 0.91428571 0.35238095 0.41904762 0.1047619 ], Agent: agent_4, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.1047619 ],
       [0.91428571, 0.86666667, 0.35238095, 0.41904762, 0.1047619 ],
       [0.35238095, 0.86666667, 0.91428571, 0.41904762, 0.1047619 ],
       [0.41904762, 0.86666667, 0.91428571, 0.35238095, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.35238095, 0.41904762]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[0, 1, 0, 0, 0]])
Reward -0.011049681686831975, Time 1.1049681686831976
-- step 6 
State: [0.86666667 0.91428571 0.35238095 0.1047619  0.59047619], Agent: agent_3, Time: 1.1049681686831976
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.1047619 , 0.59047619])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.1047619 , 0.59047619],
       [0.91428571, 0.86666667, 0.35238095, 0.1047619 , 0.59047619],
       [0.35238095, 0.86666667, 0.91428571, 0.1047619 , 0.59047619],
       [0.1047619 , 0.86666667, 0.91428571, 0.35238095, 0.59047619],
       [0.59047619, 0.86666667, 0.91428571, 0.35238095, 0.1047619 ]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[0, 1, 0, 1, 0]])
Reward -0.007738036231340539, Time 1.8787717918172515
-- step 7 
State: [0.86666667 0.91428571 0.35238095 0.58095238 0.15238095], Agent: agent_4, Time: 1.8787717918172515
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.58095238, 0.15238095])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.58095238, 0.15238095],
       [0.91428571, 0.86666667, 0.35238095, 0.58095238, 0.15238095],
       [0.35238095, 0.86666667, 0.91428571, 0.58095238, 0.15238095],
       [0.58095238, 0.86666667, 0.91428571, 0.35238095, 0.15238095],
       [0.15238095, 0.86666667, 0.91428571, 0.35238095, 0.58095238]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[0, 1, 0, 1, 0]])
Reward -0.002762479777604081, Time 2.1550197695776596
-- step 8 
State: [0.22857143 0.91428571 0.35238095 0.58095238 0.76190476], Agent: agent_0, Time: 2.1550197695776596
Pre transition data: {'state': [array([0.22857143, 0.91428571, 0.35238095, 0.58095238, 0.76190476])], 'obs': [array([[0.22857143, 0.91428571, 0.35238095, 0.58095238, 0.76190476],
       [0.91428571, 0.22857143, 0.35238095, 0.58095238, 0.76190476],
       [0.35238095, 0.22857143, 0.91428571, 0.58095238, 0.76190476],
       [0.58095238, 0.22857143, 0.91428571, 0.35238095, 0.76190476],
       [0.76190476, 0.22857143, 0.91428571, 0.35238095, 0.58095238]])], 'avail_actions': [array([[0., 0., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 1, 0]])
Reward -0.010119557678676583, Time 3.166975537445318
-- step 9 
State: [0.99047619 0.91428571 0.08571429 0.58095238 0.76190476], Agent: agent_2, Time: 3.166975537445318
Pre transition data: {'state': [array([0.99047619, 0.91428571, 0.08571429, 0.58095238, 0.76190476])], 'obs': [array([[0.99047619, 0.91428571, 0.08571429, 0.58095238, 0.76190476],
       [0.91428571, 0.99047619, 0.08571429, 0.58095238, 0.76190476],
       [0.08571429, 0.99047619, 0.91428571, 0.58095238, 0.76190476],
       [0.58095238, 0.99047619, 0.91428571, 0.08571429, 0.76190476],
       [0.76190476, 0.99047619, 0.91428571, 0.08571429, 0.58095238]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 1, 0]])
Reward -0.003922371726238021, Time 3.55921271006912
-- step 10 
State: [0.99047619 0.20952381 0.52380952 0.58095238 0.76190476], Agent: agent_1, Time: 3.55921271006912
Pre transition data: {'state': [array([0.99047619, 0.20952381, 0.52380952, 0.58095238, 0.76190476])], 'obs': [array([[0.99047619, 0.20952381, 0.52380952, 0.58095238, 0.76190476],
       [0.20952381, 0.99047619, 0.52380952, 0.58095238, 0.76190476],
       [0.52380952, 0.99047619, 0.20952381, 0.58095238, 0.76190476],
       [0.58095238, 0.99047619, 0.20952381, 0.52380952, 0.76190476],
       [0.76190476, 0.99047619, 0.20952381, 0.52380952, 0.58095238]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 1, 0]])
Reward 0.19016412172149397, Time 4.542800537919723
-- step 11 
State: [0.99047619 0.94285714 0.52380952 0.11428571 0.76190476], Agent: agent_3, Time: 4.542800537919723
Pre transition data: {'state': [array([0.99047619, 0.94285714, 0.52380952, 0.11428571, 0.76190476])], 'obs': [array([[0.99047619, 0.94285714, 0.52380952, 0.11428571, 0.76190476],
       [0.94285714, 0.99047619, 0.52380952, 0.11428571, 0.76190476],
       [0.52380952, 0.99047619, 0.94285714, 0.11428571, 0.76190476],
       [0.11428571, 0.99047619, 0.94285714, 0.52380952, 0.76190476],
       [0.76190476, 0.99047619, 0.94285714, 0.52380952, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 0]])
Reward -0.005069759316422839, Time 5.049776469562007
-- step 12 
State: [0.21904762 0.94285714 0.52380952 0.11428571 0.76190476], Agent: agent_0, Time: 5.049776469562007
Pre transition data: {'state': [array([0.21904762, 0.94285714, 0.52380952, 0.11428571, 0.76190476])], 'obs': [array([[0.21904762, 0.94285714, 0.52380952, 0.11428571, 0.76190476],
       [0.94285714, 0.21904762, 0.52380952, 0.11428571, 0.76190476],
       [0.52380952, 0.21904762, 0.94285714, 0.11428571, 0.76190476],
       [0.11428571, 0.21904762, 0.94285714, 0.52380952, 0.76190476],
       [0.76190476, 0.21904762, 0.94285714, 0.52380952, 0.11428571]])], 'avail_actions': [array([[0., 1., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 0]])
Reward -0.002498482474710686, Time 5.299624717033075
-- step 13 
State: [0.96190476 0.94285714 0.52380952 0.11428571 0.2       ], Agent: agent_4, Time: 5.299624717033075
Pre transition data: {'state': [array([0.96190476, 0.94285714, 0.52380952, 0.11428571, 0.2       ])], 'obs': [array([[0.96190476, 0.94285714, 0.52380952, 0.11428571, 0.2       ],
       [0.94285714, 0.96190476, 0.52380952, 0.11428571, 0.2       ],
       [0.52380952, 0.96190476, 0.94285714, 0.11428571, 0.2       ],
       [0.11428571, 0.96190476, 0.94285714, 0.52380952, 0.2       ],
       [0.2       , 0.96190476, 0.94285714, 0.52380952, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 1., 1., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 2]])
Reward -0.019743175452128572, Time 7.273942262245932
-- step 14 
State: [0.96190476 0.94285714 0.13333333 0.11428571 0.8952381 ], Agent: agent_2, Time: 7.273942262245932
Pre transition data: {'state': [array([0.96190476, 0.94285714, 0.13333333, 0.11428571, 0.8952381 ])], 'obs': [array([[0.96190476, 0.94285714, 0.13333333, 0.11428571, 0.8952381 ],
       [0.94285714, 0.96190476, 0.13333333, 0.11428571, 0.8952381 ],
       [0.13333333, 0.96190476, 0.94285714, 0.11428571, 0.8952381 ],
       [0.11428571, 0.96190476, 0.94285714, 0.13333333, 0.8952381 ],
       [0.8952381 , 0.96190476, 0.94285714, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 2]])
Reward -0.012865663108326535, Time 8.560508573078586
-- step 15 
State: [0.96190476 0.94285714 0.6952381  0.11428571 0.15238095], Agent: agent_4, Time: 8.560508573078586
Pre transition data: {'state': [array([0.96190476, 0.94285714, 0.6952381 , 0.11428571, 0.15238095])], 'obs': [array([[0.96190476, 0.94285714, 0.6952381 , 0.11428571, 0.15238095],
       [0.94285714, 0.96190476, 0.6952381 , 0.11428571, 0.15238095],
       [0.6952381 , 0.96190476, 0.94285714, 0.11428571, 0.15238095],
       [0.11428571, 0.96190476, 0.94285714, 0.6952381 , 0.15238095],
       [0.15238095, 0.96190476, 0.94285714, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 1]])
Reward -0.012551310964918051, Time 9.815639669570391
-- step 16 
State: [0.96190476 0.94285714 0.6952381  0.11428571 0.16190476], Agent: agent_4, Time: 9.815639669570391
Pre transition data: {'state': [array([0.96190476, 0.94285714, 0.6952381 , 0.11428571, 0.16190476])], 'obs': [array([[0.96190476, 0.94285714, 0.6952381 , 0.11428571, 0.16190476],
       [0.94285714, 0.96190476, 0.6952381 , 0.11428571, 0.16190476],
       [0.6952381 , 0.96190476, 0.94285714, 0.11428571, 0.16190476],
       [0.11428571, 0.96190476, 0.94285714, 0.6952381 , 0.16190476],
       [0.16190476, 0.96190476, 0.94285714, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 1]])
Reward 0.19571809378769778, Time 10.243830290800613
-- step 17 
State: [0.20952381 0.94285714 0.6952381  0.11428571 0.79047619], Agent: agent_0, Time: 10.243830290800613
Pre transition data: {'state': [array([0.20952381, 0.94285714, 0.6952381 , 0.11428571, 0.79047619])], 'obs': [array([[0.20952381, 0.94285714, 0.6952381 , 0.11428571, 0.79047619],
       [0.94285714, 0.20952381, 0.6952381 , 0.11428571, 0.79047619],
       [0.6952381 , 0.20952381, 0.94285714, 0.11428571, 0.79047619],
       [0.11428571, 0.20952381, 0.94285714, 0.6952381 , 0.79047619],
       [0.79047619, 0.20952381, 0.94285714, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[4, 1, 0, 4, 1]])
Reward -0.002205588078603089, Time 10.464389098660922
-- step 18 
State: [0.20952381 0.94285714 0.18095238 0.11428571 0.79047619], Agent: agent_2, Time: 10.464389098660922
Pre transition data: {'state': [array([0.20952381, 0.94285714, 0.18095238, 0.11428571, 0.79047619])], 'obs': [array([[0.20952381, 0.94285714, 0.18095238, 0.11428571, 0.79047619],
       [0.94285714, 0.20952381, 0.18095238, 0.11428571, 0.79047619],
       [0.18095238, 0.20952381, 0.94285714, 0.11428571, 0.79047619],
       [0.11428571, 0.20952381, 0.94285714, 0.18095238, 0.79047619],
       [0.79047619, 0.20952381, 0.94285714, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[4, 1, 0, 4, 1]])
Reward -5.786906020617266e-05, Time 10.470176004681539
-- step 19 
State: [0.20952381 0.21904762 0.86666667 0.11428571 0.79047619], Agent: agent_1, Time: 10.470176004681539
Pre transition data: {'state': [array([0.20952381, 0.21904762, 0.86666667, 0.11428571, 0.79047619])], 'obs': [array([[0.20952381, 0.21904762, 0.86666667, 0.11428571, 0.79047619],
       [0.21904762, 0.20952381, 0.86666667, 0.11428571, 0.79047619],
       [0.86666667, 0.20952381, 0.21904762, 0.11428571, 0.79047619],
       [0.11428571, 0.20952381, 0.21904762, 0.86666667, 0.79047619],
       [0.79047619, 0.20952381, 0.21904762, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[4, 1, 0, 4, 1]])
Reward -0.022371868128280764, Time 12.707362817509615
-- step 20 
State: [0.20952381 0.97142857 0.22857143 0.11428571 0.79047619], Agent: agent_2, Time: 12.707362817509615
Pre transition data: {'state': [array([0.20952381, 0.97142857, 0.22857143, 0.11428571, 0.79047619])], 'obs': [array([[0.20952381, 0.97142857, 0.22857143, 0.11428571, 0.79047619],
       [0.97142857, 0.20952381, 0.22857143, 0.11428571, 0.79047619],
       [0.22857143, 0.20952381, 0.97142857, 0.11428571, 0.79047619],
       [0.11428571, 0.20952381, 0.97142857, 0.22857143, 0.79047619],
       [0.79047619, 0.20952381, 0.97142857, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[4, 1, 3, 4, 1]])
Reward 0.1947176654466304, Time 13.235596272846575
-- step 21 
State: [0.20952381 0.97142857 0.99047619 0.11428571 0.17142857], Agent: agent_4, Time: 13.235596272846575
Pre transition data: {'state': [array([0.20952381, 0.97142857, 0.99047619, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.97142857, 0.99047619, 0.11428571, 0.17142857],
       [0.97142857, 0.20952381, 0.99047619, 0.11428571, 0.17142857],
       [0.99047619, 0.20952381, 0.97142857, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.97142857, 0.99047619, 0.17142857],
       [0.17142857, 0.20952381, 0.97142857, 0.99047619, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 1, 3, 4, 4]])
Reward -0.011755956918024868, Time 14.411191964649062
-- step 22 
State: [0.20952381 0.97142857 0.21904762 0.11428571 0.17142857], Agent: agent_2, Time: 14.411191964649062
Pre transition data: {'state': [array([0.20952381, 0.97142857, 0.21904762, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.97142857, 0.21904762, 0.11428571, 0.17142857],
       [0.97142857, 0.20952381, 0.21904762, 0.11428571, 0.17142857],
       [0.21904762, 0.20952381, 0.97142857, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.97142857, 0.21904762, 0.17142857],
       [0.17142857, 0.20952381, 0.97142857, 0.21904762, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 1, 1, 4, 4]])
Reward 0.17993298822221, Time 16.417893142428063
-- step 23 
State: [0.20952381 0.22857143 0.97142857 0.11428571 0.17142857], Agent: agent_1, Time: 16.417893142428063
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.97142857, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.97142857, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.97142857, 0.11428571, 0.17142857],
       [0.97142857, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.97142857, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.97142857, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.08960694068322368, Time 25.378587210750432
-- step 24 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 25.378587210750432
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.018823267035608424, Time 27.260913914311274
-- step 25 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 27.260913914311274
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.020290955943497196, Time 29.290009508660994
-- step 26 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 29.290009508660994
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02398936935691566, Time 31.68894644435256
-- step 27 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 31.68894644435256
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.018842201769368287, Time 33.57316662128939
-- step 28 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 33.57316662128939
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.036072058836770754, Time 37.18037250496646
-- step 29 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 37.18037250496646
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03715771587564724, Time 40.89614409253119
-- step 30 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 40.89614409253119
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02693296481822479, Time 43.58944057435367
-- step 31 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 43.58944057435367
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03623712385462596, Time 47.21315295981626
-- step 32 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 47.21315295981626
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.025348690543506577, Time 49.74802201416692
-- step 33 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 49.74802201416692
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03134076626117434, Time 52.882098640284354
-- step 34 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 52.882098640284354
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.0236651490827235, Time 55.248613548556705
-- step 35 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 55.248613548556705
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022562339858926635, Time 57.50484753444937
-- step 36 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 57.50484753444937
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.018242940056308044, Time 59.32914154008017
-- step 37 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 59.32914154008017
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.025321483348764245, Time 61.8612898749566
-- step 38 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 61.8612898749566
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.032650548757087276, Time 65.12634475066533
-- step 39 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 65.12634475066533
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04026426873207797, Time 69.15277162387312
-- step 40 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 69.15277162387312
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.048266867456560336, Time 73.97945836952915
-- step 41 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 73.97945836952915
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03172282768163953, Time 77.15174113769311
-- step 42 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 77.15174113769311
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027364145420922057, Time 79.88815567978531
-- step 43 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 79.88815567978531
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.027186013109136695, Time 82.60675699069898
-- step 44 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 82.60675699069898
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.026029511681666548, Time 85.20970815886564
-- step 45 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 85.20970815886564
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.019504432594107328, Time 87.16015141827637
-- step 46 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 87.16015141827637
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03884103882052415, Time 91.04425530032879
-- step 47 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 91.04425530032879
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.0184383835604487, Time 92.88809365637366
-- step 48 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 92.88809365637366
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.023670777614726576, Time 95.25517141784631
-- step 49 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 95.25517141784631
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.015832454093154667, Time 96.83841682716178
-- step 50 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 96.83841682716178
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.046024144910317234, Time 101.4408313181935
-- step 51 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 101.4408313181935
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03066158725843806, Time 104.50699004403731
-- step 52 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 104.50699004403731
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.017297634623883198, Time 106.23675350642563
-- step 53 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 106.23675350642563
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.01904133900279419, Time 108.14088740670505
-- step 54 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 108.14088740670505
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.0224198435913128, Time 110.38287176583633
-- step 55 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 110.38287176583633
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02394691423720303, Time 112.77756318955663
-- step 56 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 112.77756318955663
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03156350618508824, Time 115.93391380806545
-- step 57 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 115.93391380806545
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.016083894769247563, Time 117.54230328499021
-- step 58 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 117.54230328499021
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.018340981225452992, Time 119.37640140753551
-- step 59 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 119.37640140753551
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02310076381176799, Time 121.68647778871231
-- step 60 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 121.68647778871231
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027682805768634324, Time 124.45475836557574
-- step 61 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 124.45475836557574
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.017292863455942182, Time 126.18404471116996
-- step 62 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 126.18404471116996
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.020344282834793292, Time 128.2184729946493
-- step 63 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 128.2184729946493
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.030920103638222257, Time 131.31048335847152
-- step 64 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 131.31048335847152
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.028879042817431186, Time 134.19838764021463
-- step 65 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 134.19838764021463
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02074995213931089, Time 136.27338285414572
-- step 66 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 136.27338285414572
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.024886998171868128, Time 138.76208267133254
-- step 67 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 138.76208267133254
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028165646483145963, Time 141.57864731964713
-- step 68 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 141.57864731964713
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03184491780077764, Time 144.7631390997249
-- step 69 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 144.7631390997249
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03011789065366912, Time 147.7749281650918
-- step 70 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 147.7749281650918
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02052845010675611, Time 149.82777317576742
-- step 71 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 149.82777317576742
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028192093898993277, Time 152.64698256566675
-- step 72 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 152.64698256566675
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04016918251054904, Time 156.66390081672165
-- step 73 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 156.66390081672165
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.020218577423193267, Time 158.68575855904098
-- step 74 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 158.68575855904098
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02527344192859374, Time 161.21310275190035
-- step 75 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 161.21310275190035
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.023641364643504234, Time 163.57723921625077
-- step 76 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 163.57723921625077
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03423547350972882, Time 167.00078656722366
-- step 77 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 167.00078656722366
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028060734865503038, Time 169.80686005377396
-- step 78 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 169.80686005377396
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.029454486888349438, Time 172.7523087426089
-- step 79 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 172.7523087426089
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.061051673384495755, Time 178.85747608105848
-- step 80 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 178.85747608105848
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.01660562594758403, Time 180.51803867581688
-- step 81 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 180.51803867581688
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.0321129414800626, Time 183.72933282382314
-- step 82 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 183.72933282382314
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.026644304918901015, Time 186.39376331571324
-- step 83 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 186.39376331571324
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022202287068403166, Time 188.61399202255356
-- step 84 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 188.61399202255356
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.022176813838264024, Time 190.83167340637996
-- step 85 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 190.83167340637996
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028560286841515393, Time 193.6877020905315
-- step 86 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 193.6877020905315
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.015912189003530273, Time 195.27892099088453
-- step 87 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 195.27892099088453
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02636685674005008, Time 197.91560666488954
-- step 88 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 197.91560666488954
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.029738575500282992, Time 200.88946421491784
-- step 89 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 200.88946421491784
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04045292092588454, Time 204.9347563075063
-- step 90 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 204.9347563075063
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02547052655403803, Time 207.4818089629101
-- step 91 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 207.4818089629101
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.014814146386391088, Time 208.9632236015492
-- step 92 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 208.9632236015492
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.036374721430828455, Time 212.60069574463205
-- step 93 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 212.60069574463205
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029951331848338043, Time 215.59582892946585
-- step 94 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 215.59582892946585
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.026008879278237772, Time 218.19671685728963
-- step 95 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 218.19671685728963
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.05721988245333534, Time 223.91870510262316
-- step 96 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 223.91870510262316
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.036044815684674915, Time 227.52318667109066
-- step 97 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 227.52318667109066
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.021709349049524464, Time 229.6941215760431
-- step 98 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 229.6941215760431
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.01677607451138414, Time 231.37172902718152
-- step 99 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 231.37172902718152
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.031183502325998803, Time 234.4900792597814
-- step 100 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 234.4900792597814
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.040552473747954704, Time 238.54532663457687
-- step 101 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 238.54532663457687
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.020753790936564372, Time 240.6207057282333
-- step 102 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 240.6207057282333
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.015089860008405367, Time 242.12969172907384
-- step 103 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 242.12969172907384
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02602283347833776, Time 244.73197507690762
-- step 104 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 244.73197507690762
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03786068464060946, Time 248.51804354096856
-- step 105 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 248.51804354096856
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02268687583887555, Time 250.78673112485612
-- step 106 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 250.78673112485612
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.05500583756273301, Time 256.2873148811294
-- step 107 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 256.2873148811294
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.041302158663536946, Time 260.4175307474831
-- step 108 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 260.4175307474831
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03172495110672571, Time 263.5900258581557
-- step 109 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 263.5900258581557
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.017484281479999027, Time 265.3384540061556
-- step 110 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 265.3384540061556
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.042336540698001385, Time 269.5721080759557
-- step 111 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 269.5721080759557
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04755066464018853, Time 274.3271745399746
-- step 112 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 274.3271745399746
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.05461452424854201, Time 279.7886269648288
-- step 113 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 279.7886269648288
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02171357059577758, Time 281.95998402440654
-- step 114 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 281.95998402440654
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04306854795534207, Time 286.26683881994074
-- step 115 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 286.26683881994074
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02772111910117758, Time 289.0389507300585
-- step 116 
State: [0.20952381 0.22857143 0.13333333 0.11428571 0.17142857], Agent: agent_2, Time: 289.0389507300585
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.13333333, 0.11428571, 0.17142857],
       [0.13333333, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.13333333, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.045306414717080655, Time 293.56959220176657
-- step 117 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 293.56959220176657
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.02516203002816894, Time 296.08579520458346
-- step 118 
State: [0.20952381 0.22857143 0.07619048 0.11428571 0.17142857], Agent: agent_2, Time: 296.08579520458346
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.07619048, 0.11428571, 0.17142857],
       [0.07619048, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.07619048, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.07619048, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02269052536109484, Time 298.35484774069295
-- step 119 
State: [0.20952381 0.22857143 0.12380952 0.11428571 0.17142857], Agent: agent_2, Time: 298.35484774069295
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.12380952, 0.11428571, 0.17142857],
       [0.12380952, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.12380952, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.12380952, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.028560479375099136, Time 301.21089567820286
-- step 120 
State: [0.20952381 0.22857143 0.07619048 0.11428571 0.17142857], Agent: agent_2, Time: 301.21089567820286
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.07619048, 0.11428571, 0.17142857],
       [0.07619048, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.07619048, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.07619048, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03629236254643899, Time 304.84013193284676
-- step 121 
State: [0.20952381 0.22857143 0.12380952 0.11428571 0.17142857], Agent: agent_2, Time: 304.84013193284676
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.12380952, 0.11428571, 0.17142857],
       [0.12380952, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.12380952, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.12380952, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.020299065301466045, Time 306.87003846299336
-- step 122 
State: [0.20952381 0.22857143 0.07619048 0.11428571 0.17142857], Agent: agent_2, Time: 306.87003846299336
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.07619048, 0.11428571, 0.17142857],
       [0.07619048, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.07619048, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.07619048, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.031250575451110194, Time 309.9950960081044
-- step 123 
State: [0.20952381 0.22857143 0.12380952 0.11428571 0.17142857], Agent: agent_2, Time: 309.9950960081044
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.12380952, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.12380952, 0.11428571, 0.17142857],
       [0.12380952, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.12380952, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.12380952, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.022660011370965093, Time 312.2610971452009
-- step 124 
State: [0.20952381 0.22857143 0.07619048 0.11428571 0.17142857], Agent: agent_2, Time: 312.2610971452009
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.07619048, 0.11428571, 0.17142857],
       [0.07619048, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.07619048, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.07619048, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.02254706964129639, Time 314.51580410933053
-- step 125 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 314.51580410933053
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.030848133815160283, Time 317.60061749084656
-- step 126 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 317.60061749084656
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.01926552048203689, Time 319.52716953905025
-- step 127 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 319.52716953905025
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.033819746207839785, Time 322.9091441598342
-- step 128 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 322.9091441598342
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.023373078171593988, Time 325.2464519769936
-- step 129 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 325.2464519769936
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.017535036042623915, Time 326.999955581256
-- step 130 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 326.999955581256
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022034662315141985, Time 329.2034218127702
-- step 131 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 329.2034218127702
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04026159893826048, Time 333.22958170659626
-- step 132 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 333.22958170659626
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.031584761003791754, Time 336.38805780697544
-- step 133 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 336.38805780697544
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.043424117133246794, Time 340.7304695203001
-- step 134 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 340.7304695203001
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02678162305948092, Time 343.4086318262482
-- step 135 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 343.4086318262482
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027981044968952914, Time 346.2067363231435
-- step 136 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 346.2067363231435
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029330473476286444, Time 349.13978367077215
-- step 137 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 349.13978367077215
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02465121151755227, Time 351.6049048225274
-- step 138 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 351.6049048225274
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.052429497373086636, Time 356.84785455983604
-- step 139 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 356.84785455983604
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.023975111052289434, Time 359.245365665065
-- step 140 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 359.245365665065
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.016783386169688583, Time 360.92370428203384
-- step 141 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 360.92370428203384
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.0269162949667799, Time 363.61533377871183
-- step 142 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 363.61533377871183
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.031365786229762875, Time 366.7519124016881
-- step 143 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 366.7519124016881
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.04239791846430762, Time 370.9917042481189
-- step 144 
State: [0.20952381 0.22857143 0.01904762 0.11428571 0.17142857], Agent: agent_2, Time: 370.9917042481189
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.01904762, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.01904762, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.01904762, 0.11428571, 0.17142857],
       [0.01904762, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.01904762, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.01904762, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.03521886898362823, Time 374.5135911464817
-- step 145 
State: [0.20952381 0.22857143 0.00952381 0.11428571 0.17142857], Agent: agent_2, Time: 374.5135911464817
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.00952381, 0.11428571, 0.17142857],
       [0.00952381, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.00952381, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.00952381, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.030514183413295086, Time 377.5650094878112
-- step 146 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 377.5650094878112
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.0298714618103196, Time 380.55215566884317
-- step 147 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 380.55215566884317
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04871188196595995, Time 385.42334386543916
-- step 148 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 385.42334386543916
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04046364726673289, Time 389.46970859211245
-- step 149 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 389.46970859211245
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.012176862985284628, Time 390.6873948906409
-- step 150 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 390.6873948906409
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.026890515101374034, Time 393.3764464007783
-- step 151 
State: [0.20952381 0.22857143 0.00952381 0.11428571 0.17142857], Agent: agent_2, Time: 393.3764464007783
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.00952381, 0.11428571, 0.17142857],
       [0.00952381, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.00952381, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.00952381, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.020820540479560348, Time 395.45850044873436
-- step 152 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 395.45850044873436
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.01596994548797568, Time 397.0554949975319
-- step 153 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 397.0554949975319
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward 9.222780996338386, Time 401.04234794876874
events [('congestion', 0.0, 'agent_0', 'e_(3, 4)_(4, 4)', 0, 0), ('congestion', 0.0, 'agent_1', 'e_(4, 1)_(4, 2)', 0, 0), ('congestion', 0.0, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('congestion', 0.0, 'agent_3', 'e_(1, 1)_(2, 1)', 0, 0), ('congestion', 0.0, 'agent_4', 'e_(2, 1)_(3, 1)', 0, 0), ('location', 1.1049681686831976, 'agent_3', '(2, 1)'), ('congestion', 1.1049681686831976, 'agent_3', 'e_(2, 1)_(2, 2)', 0, 0), ('location', 1.8787717918172515, 'agent_4', '(3, 1)'), ('congestion', 1.8787717918172515, 'agent_4', 'e_(3, 1)_(4, 1)', 0, 0), ('location', 2.1550197695776596, 'agent_0', '(4, 4)'), ('congestion', 2.1550197695776596, 'agent_0', 'e_(4, 4)_(4, 3)', 0, 0), ('location', 3.166975537445318, 'agent_2', '(1, 4)'), ('congestion', 3.166975537445318, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('location', 3.5592127100691195, 'agent_1', '(4, 2)'), ('congestion', 3.55921271006912, 'agent_1', 'e_(4, 2)_(4, 3)', 1, 1), ('location', 4.542800537919724, 'agent_3', '(2, 2)'), ('location', 4.542800537919723, 'agent_3', 'Agent reached goal'), ('location', 5.049776469562007, 'agent_0', '(4, 3)'), ('congestion', 5.049776469562007, 'agent_0', 'e_(4, 3)_(4, 2)', 0, 0), ('location', 5.299624717033074, 'agent_4', '(4, 1)'), ('congestion', 5.299624717033075, 'agent_4', 'e_(4, 1)_(3, 1)', 0, 0), ('location', 7.273942262245932, 'agent_2', '(2, 4)'), ('congestion', 7.273942262245932, 'agent_2', 'e_(2, 4)_(3, 4)', 0, 0), ('location', 8.560508573078586, 'agent_4', '(3, 1)'), ('congestion', 8.560508573078586, 'agent_4', 'e_(3, 1)_(3, 2)', 0, 0), ('location', 9.815639669570391, 'agent_4', '(3, 2)'), ('congestion', 9.815639669570391, 'agent_4', 'e_(3, 2)_(3, 3)', 0, 0), ('location', 10.243830290800613, 'agent_0', '(4, 2)'), ('location', 10.243830290800613, 'agent_0', 'Agent reached goal'), ('location', 10.464389098660922, 'agent_2', '(3, 4)'), ('congestion', 10.464389098660922, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 10.470176004681539, 'agent_1', '(4, 3)'), ('congestion', 10.470176004681539, 'agent_1', 'e_(4, 3)_(4, 4)', 1, 1), ('location', 12.707362817509615, 'agent_2', '(4, 4)'), ('congestion', 12.707362817509615, 'agent_2', 'e_(4, 4)_(4, 3)', 0, 0), ('location', 13.235596272846575, 'agent_4', '(3, 3)'), ('location', 13.235596272846575, 'agent_4', 'Agent reached goal'), ('location', 14.411191964649062, 'agent_2', '(4, 3)'), ('congestion', 14.411191964649062, 'agent_2', 'e_(4, 3)_(4, 4)', 1, 1), ('location', 16.417893142428063, 'agent_1', '(4, 4)'), ('location', 16.417893142428063, 'agent_1', 'Agent reached goal'), ('location', 25.37858721075043, 'agent_2', '(4, 4)'), ('congestion', 25.378587210750432, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 27.260913914311274, 'agent_2', '(3, 4)'), ('congestion', 27.260913914311274, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 29.290009508660997, 'agent_2', '(4, 4)'), ('congestion', 29.290009508660994, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 31.68894644435256, 'agent_2', '(3, 4)'), ('congestion', 31.68894644435256, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 33.573166621289396, 'agent_2', '(4, 4)'), ('congestion', 33.57316662128939, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 37.18037250496646, 'agent_2', '(3, 4)'), ('congestion', 37.18037250496646, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 40.89614409253119, 'agent_2', '(4, 4)'), ('congestion', 40.89614409253119, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 43.58944057435367, 'agent_2', '(3, 4)'), ('congestion', 43.58944057435367, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 47.21315295981626, 'agent_2', '(4, 4)'), ('congestion', 47.21315295981626, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 49.74802201416692, 'agent_2', '(3, 4)'), ('congestion', 49.74802201416692, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 52.882098640284354, 'agent_2', '(4, 4)'), ('congestion', 52.882098640284354, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 55.248613548556705, 'agent_2', '(3, 4)'), ('congestion', 55.248613548556705, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 57.504847534449375, 'agent_2', '(4, 4)'), ('congestion', 57.50484753444937, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 59.329141540080165, 'agent_2', '(3, 4)'), ('congestion', 59.32914154008017, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 61.86128987495659, 'agent_2', '(4, 4)'), ('congestion', 61.8612898749566, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 65.12634475066533, 'agent_2', '(3, 4)'), ('congestion', 65.12634475066533, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 69.15277162387312, 'agent_2', '(4, 4)'), ('congestion', 69.15277162387312, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 73.97945836952917, 'agent_2', '(3, 4)'), ('congestion', 73.97945836952915, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 77.1517411376931, 'agent_2', '(4, 4)'), ('congestion', 77.15174113769311, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 79.88815567978531, 'agent_2', '(3, 4)'), ('congestion', 79.88815567978531, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 82.60675699069898, 'agent_2', '(4, 4)'), ('congestion', 82.60675699069898, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 85.20970815886564, 'agent_2', '(3, 4)'), ('congestion', 85.20970815886564, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 87.16015141827639, 'agent_2', '(4, 4)'), ('congestion', 87.16015141827637, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 91.04425530032879, 'agent_2', '(3, 4)'), ('congestion', 91.04425530032879, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 92.88809365637364, 'agent_2', '(4, 4)'), ('congestion', 92.88809365637366, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 95.25517141784631, 'agent_2', '(3, 4)'), ('congestion', 95.25517141784631, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 96.83841682716178, 'agent_2', '(4, 4)'), ('congestion', 96.83841682716178, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 101.4408313181935, 'agent_2', '(3, 4)'), ('congestion', 101.4408313181935, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 104.50699004403731, 'agent_2', '(4, 4)'), ('congestion', 104.50699004403731, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 106.23675350642561, 'agent_2', '(3, 4)'), ('congestion', 106.23675350642563, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 108.14088740670505, 'agent_2', '(4, 4)'), ('congestion', 108.14088740670505, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 110.38287176583633, 'agent_2', '(3, 4)'), ('congestion', 110.38287176583633, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 112.77756318955663, 'agent_2', '(4, 4)'), ('congestion', 112.77756318955663, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 115.93391380806545, 'agent_2', '(3, 4)'), ('congestion', 115.93391380806545, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 117.54230328499021, 'agent_2', '(4, 4)'), ('congestion', 117.54230328499021, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 119.37640140753551, 'agent_2', '(3, 4)'), ('congestion', 119.37640140753551, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 121.6864777887123, 'agent_2', '(4, 4)'), ('congestion', 121.68647778871231, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 124.45475836557574, 'agent_2', '(3, 4)'), ('congestion', 124.45475836557574, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 126.18404471116997, 'agent_2', '(4, 4)'), ('congestion', 126.18404471116996, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 128.2184729946493, 'agent_2', '(3, 4)'), ('congestion', 128.2184729946493, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 131.31048335847152, 'agent_2', '(4, 4)'), ('congestion', 131.31048335847152, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 134.19838764021466, 'agent_2', '(3, 4)'), ('congestion', 134.19838764021463, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 136.27338285414572, 'agent_2', '(4, 4)'), ('congestion', 136.27338285414572, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 138.76208267133254, 'agent_2', '(3, 4)'), ('congestion', 138.76208267133254, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 141.57864731964713, 'agent_2', '(4, 4)'), ('congestion', 141.57864731964713, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 144.7631390997249, 'agent_2', '(3, 4)'), ('congestion', 144.7631390997249, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 147.7749281650918, 'agent_2', '(4, 4)'), ('congestion', 147.7749281650918, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 149.82777317576742, 'agent_2', '(3, 4)'), ('congestion', 149.82777317576742, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 152.64698256566675, 'agent_2', '(4, 4)'), ('congestion', 152.64698256566675, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 156.66390081672165, 'agent_2', '(3, 4)'), ('congestion', 156.66390081672165, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 158.68575855904098, 'agent_2', '(4, 4)'), ('congestion', 158.68575855904098, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 161.21310275190032, 'agent_2', '(3, 4)'), ('congestion', 161.21310275190035, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 163.57723921625075, 'agent_2', '(4, 4)'), ('congestion', 163.57723921625077, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 167.00078656722366, 'agent_2', '(3, 4)'), ('congestion', 167.00078656722366, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 169.80686005377396, 'agent_2', '(4, 4)'), ('congestion', 169.80686005377396, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 172.7523087426089, 'agent_2', '(3, 4)'), ('congestion', 172.7523087426089, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 178.85747608105848, 'agent_2', '(4, 4)'), ('congestion', 178.85747608105848, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 180.51803867581688, 'agent_2', '(3, 4)'), ('congestion', 180.51803867581688, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 183.72933282382314, 'agent_2', '(4, 4)'), ('congestion', 183.72933282382314, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 186.39376331571324, 'agent_2', '(3, 4)'), ('congestion', 186.39376331571324, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 188.61399202255356, 'agent_2', '(4, 4)'), ('congestion', 188.61399202255356, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 190.83167340637996, 'agent_2', '(3, 4)'), ('congestion', 190.83167340637996, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 193.68770209053147, 'agent_2', '(4, 4)'), ('congestion', 193.6877020905315, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 195.27892099088453, 'agent_2', '(3, 4)'), ('congestion', 195.27892099088453, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 197.91560666488954, 'agent_2', '(4, 4)'), ('congestion', 197.91560666488954, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 200.88946421491784, 'agent_2', '(3, 4)'), ('congestion', 200.88946421491784, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 204.93475630750626, 'agent_2', '(4, 4)'), ('congestion', 204.9347563075063, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 207.48180896291012, 'agent_2', '(3, 4)'), ('congestion', 207.4818089629101, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 208.9632236015492, 'agent_2', '(4, 4)'), ('congestion', 208.9632236015492, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 212.60069574463202, 'agent_2', '(3, 4)'), ('congestion', 212.60069574463205, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 215.59582892946585, 'agent_2', '(4, 4)'), ('congestion', 215.59582892946585, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 218.19671685728963, 'agent_2', '(3, 4)'), ('congestion', 218.19671685728963, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 223.91870510262314, 'agent_2', '(4, 4)'), ('congestion', 223.91870510262316, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 227.52318667109063, 'agent_2', '(3, 4)'), ('congestion', 227.52318667109066, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 229.6941215760431, 'agent_2', '(4, 4)'), ('congestion', 229.6941215760431, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 231.37172902718152, 'agent_2', '(3, 4)'), ('congestion', 231.37172902718152, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 234.4900792597814, 'agent_2', '(4, 4)'), ('congestion', 234.4900792597814, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 238.54532663457687, 'agent_2', '(3, 4)'), ('congestion', 238.54532663457687, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 240.6207057282333, 'agent_2', '(4, 4)'), ('congestion', 240.6207057282333, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 242.12969172907384, 'agent_2', '(3, 4)'), ('congestion', 242.12969172907384, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 244.73197507690762, 'agent_2', '(4, 4)'), ('congestion', 244.73197507690762, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 248.51804354096856, 'agent_2', '(3, 4)'), ('congestion', 248.51804354096856, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 250.78673112485612, 'agent_2', '(4, 4)'), ('congestion', 250.78673112485612, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 256.28731488112936, 'agent_2', '(3, 4)'), ('congestion', 256.2873148811294, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 260.41753074748317, 'agent_2', '(4, 4)'), ('congestion', 260.4175307474831, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 263.5900258581557, 'agent_2', '(3, 4)'), ('congestion', 263.5900258581557, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 265.3384540061556, 'agent_2', '(4, 4)'), ('congestion', 265.3384540061556, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 269.5721080759557, 'agent_2', '(3, 4)'), ('congestion', 269.5721080759557, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 274.3271745399746, 'agent_2', '(4, 4)'), ('congestion', 274.3271745399746, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 279.78862696482884, 'agent_2', '(3, 4)'), ('congestion', 279.7886269648288, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 281.95998402440654, 'agent_2', '(4, 4)'), ('congestion', 281.95998402440654, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 286.26683881994074, 'agent_2', '(3, 4)'), ('congestion', 286.26683881994074, 'agent_2', 'e_(3, 4)_(2, 4)', 0, 0), ('location', 289.0389507300585, 'agent_2', '(2, 4)'), ('congestion', 289.0389507300585, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('location', 293.56959220176657, 'agent_2', '(1, 4)'), ('congestion', 293.56959220176657, 'agent_2', 'e_(1, 4)_(1, 3)', 0, 0), ('location', 296.08579520458346, 'agent_2', '(1, 3)'), ('congestion', 296.08579520458346, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('location', 298.35484774069295, 'agent_2', '(2, 3)'), ('congestion', 298.35484774069295, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('location', 301.2108956782028, 'agent_2', '(1, 3)'), ('congestion', 301.21089567820286, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('location', 304.84013193284676, 'agent_2', '(2, 3)'), ('congestion', 304.84013193284676, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('location', 306.8700384629933, 'agent_2', '(1, 3)'), ('congestion', 306.87003846299336, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('location', 309.9950960081044, 'agent_2', '(2, 3)'), ('congestion', 309.9950960081044, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('location', 312.2610971452009, 'agent_2', '(1, 3)'), ('congestion', 312.2610971452009, 'agent_2', 'e_(1, 3)_(1, 4)', 0, 0), ('location', 314.51580410933053, 'agent_2', '(1, 4)'), ('congestion', 314.51580410933053, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 317.60061749084656, 'agent_2', '(0, 4)'), ('congestion', 317.60061749084656, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 319.52716953905025, 'agent_2', '(0, 3)'), ('congestion', 319.52716953905025, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('location', 322.9091441598342, 'agent_2', '(0, 4)'), ('congestion', 322.9091441598342, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 325.2464519769936, 'agent_2', '(1, 4)'), ('congestion', 325.2464519769936, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 326.9999555812561, 'agent_2', '(0, 4)'), ('congestion', 326.999955581256, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 329.2034218127702, 'agent_2', '(1, 4)'), ('congestion', 329.2034218127702, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 333.22958170659626, 'agent_2', '(0, 4)'), ('congestion', 333.22958170659626, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 336.38805780697544, 'agent_2', '(1, 4)'), ('congestion', 336.38805780697544, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 340.7304695203001, 'agent_2', '(0, 4)'), ('congestion', 340.7304695203001, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 343.4086318262482, 'agent_2', '(1, 4)'), ('congestion', 343.4086318262482, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 346.2067363231435, 'agent_2', '(0, 4)'), ('congestion', 346.2067363231435, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 349.13978367077215, 'agent_2', '(1, 4)'), ('congestion', 349.13978367077215, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 351.6049048225274, 'agent_2', '(0, 4)'), ('congestion', 351.6049048225274, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 356.84785455983604, 'agent_2', '(0, 3)'), ('congestion', 356.84785455983604, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('location', 359.2453656650649, 'agent_2', '(0, 4)'), ('congestion', 359.245365665065, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 360.92370428203384, 'agent_2', '(1, 4)'), ('congestion', 360.92370428203384, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 363.6153337787119, 'agent_2', '(0, 4)'), ('congestion', 363.61533377871183, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 366.7519124016881, 'agent_2', '(0, 3)'), ('congestion', 366.7519124016881, 'agent_2', 'e_(0, 3)_(0, 2)', 0, 0), ('location', 370.99170424811894, 'agent_2', '(0, 2)'), ('congestion', 370.9917042481189, 'agent_2', 'e_(0, 2)_(0, 1)', 0, 0), ('location', 374.5135911464817, 'agent_2', '(0, 1)'), ('congestion', 374.5135911464817, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('location', 377.56500948781115, 'agent_2', '(0, 0)'), ('congestion', 377.5650094878112, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 380.5521556688431, 'agent_2', '(1, 0)'), ('congestion', 380.55215566884317, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('location', 385.42334386543916, 'agent_2', '(0, 0)'), ('congestion', 385.42334386543916, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 389.46970859211245, 'agent_2', '(1, 0)'), ('congestion', 389.46970859211245, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('location', 390.6873948906409, 'agent_2', '(0, 0)'), ('congestion', 390.6873948906409, 'agent_2', 'e_(0, 0)_(0, 1)', 0, 0), ('location', 393.3764464007784, 'agent_2', '(0, 1)'), ('congestion', 393.3764464007783, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('location', 395.4585004487343, 'agent_2', '(0, 0)'), ('congestion', 395.45850044873436, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 397.0554949975319, 'agent_2', '(1, 0)'), ('congestion', 397.0554949975319, 'agent_2', 'e_(1, 0)_(2, 0)', 0, 0), ('location', 401.04234794876874, 'agent_2', '(2, 0)'), ('location', 401.04234794876874, 'agent_2', 'Agent reached goal')]
len 303
aevents {'agent_0': [('congestion', 0.0, 'agent_0', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 2.1550197695776596), ('congestion', 2.1550197695776596, 'agent_0', 'e_(4, 4)_(4, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3510>, 5.049776469562007), ('congestion', 5.049776469562007, 'agent_0', 'e_(4, 3)_(4, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3410>, 10.243830290800613)], 'agent_1': [('congestion', 0.0, 'agent_1', 'e_(4, 1)_(4, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3410>, 3.5592127100691195), ('congestion', 3.55921271006912, 'agent_1', 'e_(4, 2)_(4, 3)', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3510>, 10.470176004681539), ('congestion', 10.470176004681539, 'agent_1', 'e_(4, 3)_(4, 4)', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 16.417893142428063)], 'agent_2': [('congestion', 0.0, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 3.166975537445318), ('congestion', 3.166975537445318, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9bd0>, 7.273942262245932), ('congestion', 7.273942262245932, 'agent_2', 'e_(2, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 10.464389098660922), ('congestion', 10.464389098660922, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 12.707362817509615), ('congestion', 12.707362817509615, 'agent_2', 'e_(4, 4)_(4, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3510>, 14.411191964649062), ('congestion', 14.411191964649062, 'agent_2', 'e_(4, 3)_(4, 4)', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 25.37858721075043), ('congestion', 25.378587210750432, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 27.260913914311274), ('congestion', 27.260913914311274, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 29.290009508660997), ('congestion', 29.290009508660994, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 31.68894644435256), ('congestion', 31.68894644435256, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 33.573166621289396), ('congestion', 33.57316662128939, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 37.18037250496646), ('congestion', 37.18037250496646, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 40.89614409253119), ('congestion', 40.89614409253119, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 43.58944057435367), ('congestion', 43.58944057435367, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 47.21315295981626), ('congestion', 47.21315295981626, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 49.74802201416692), ('congestion', 49.74802201416692, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 52.882098640284354), ('congestion', 52.882098640284354, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 55.248613548556705), ('congestion', 55.248613548556705, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 57.504847534449375), ('congestion', 57.50484753444937, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 59.329141540080165), ('congestion', 59.32914154008017, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 61.86128987495659), ('congestion', 61.8612898749566, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 65.12634475066533), ('congestion', 65.12634475066533, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 69.15277162387312), ('congestion', 69.15277162387312, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 73.97945836952917), ('congestion', 73.97945836952915, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 77.1517411376931), ('congestion', 77.15174113769311, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 79.88815567978531), ('congestion', 79.88815567978531, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 82.60675699069898), ('congestion', 82.60675699069898, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 85.20970815886564), ('congestion', 85.20970815886564, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 87.16015141827639), ('congestion', 87.16015141827637, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 91.04425530032879), ('congestion', 91.04425530032879, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 92.88809365637364), ('congestion', 92.88809365637366, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 95.25517141784631), ('congestion', 95.25517141784631, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 96.83841682716178), ('congestion', 96.83841682716178, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 101.4408313181935), ('congestion', 101.4408313181935, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 104.50699004403731), ('congestion', 104.50699004403731, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 106.23675350642561), ('congestion', 106.23675350642563, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 108.14088740670505), ('congestion', 108.14088740670505, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 110.38287176583633), ('congestion', 110.38287176583633, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 112.77756318955663), ('congestion', 112.77756318955663, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 115.93391380806545), ('congestion', 115.93391380806545, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 117.54230328499021), ('congestion', 117.54230328499021, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 119.37640140753551), ('congestion', 119.37640140753551, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 121.6864777887123), ('congestion', 121.68647778871231, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 124.45475836557574), ('congestion', 124.45475836557574, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 126.18404471116997), ('congestion', 126.18404471116996, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 128.2184729946493), ('congestion', 128.2184729946493, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 131.31048335847152), ('congestion', 131.31048335847152, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 134.19838764021466), ('congestion', 134.19838764021463, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 136.27338285414572), ('congestion', 136.27338285414572, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 138.76208267133254), ('congestion', 138.76208267133254, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 141.57864731964713), ('congestion', 141.57864731964713, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 144.7631390997249), ('congestion', 144.7631390997249, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 147.7749281650918), ('congestion', 147.7749281650918, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 149.82777317576742), ('congestion', 149.82777317576742, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 152.64698256566675), ('congestion', 152.64698256566675, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 156.66390081672165), ('congestion', 156.66390081672165, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 158.68575855904098), ('congestion', 158.68575855904098, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 161.21310275190032), ('congestion', 161.21310275190035, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 163.57723921625075), ('congestion', 163.57723921625077, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 167.00078656722366), ('congestion', 167.00078656722366, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 169.80686005377396), ('congestion', 169.80686005377396, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 172.7523087426089), ('congestion', 172.7523087426089, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 178.85747608105848), ('congestion', 178.85747608105848, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 180.51803867581688), ('congestion', 180.51803867581688, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 183.72933282382314), ('congestion', 183.72933282382314, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 186.39376331571324), ('congestion', 186.39376331571324, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 188.61399202255356), ('congestion', 188.61399202255356, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 190.83167340637996), ('congestion', 190.83167340637996, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 193.68770209053147), ('congestion', 193.6877020905315, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 195.27892099088453), ('congestion', 195.27892099088453, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 197.91560666488954), ('congestion', 197.91560666488954, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 200.88946421491784), ('congestion', 200.88946421491784, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 204.93475630750626), ('congestion', 204.9347563075063, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 207.48180896291012), ('congestion', 207.4818089629101, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 208.9632236015492), ('congestion', 208.9632236015492, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 212.60069574463202), ('congestion', 212.60069574463205, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 215.59582892946585), ('congestion', 215.59582892946585, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 218.19671685728963), ('congestion', 218.19671685728963, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 223.91870510262314), ('congestion', 223.91870510262316, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 227.52318667109063), ('congestion', 227.52318667109066, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 229.6941215760431), ('congestion', 229.6941215760431, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 231.37172902718152), ('congestion', 231.37172902718152, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 234.4900792597814), ('congestion', 234.4900792597814, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 238.54532663457687), ('congestion', 238.54532663457687, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 240.6207057282333), ('congestion', 240.6207057282333, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 242.12969172907384), ('congestion', 242.12969172907384, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 244.73197507690762), ('congestion', 244.73197507690762, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 248.51804354096856), ('congestion', 248.51804354096856, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 250.78673112485612), ('congestion', 250.78673112485612, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 256.28731488112936), ('congestion', 256.2873148811294, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 260.41753074748317), ('congestion', 260.4175307474831, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 263.5900258581557), ('congestion', 263.5900258581557, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 265.3384540061556), ('congestion', 265.3384540061556, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 269.5721080759557), ('congestion', 269.5721080759557, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 274.3271745399746), ('congestion', 274.3271745399746, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 279.78862696482884), ('congestion', 279.7886269648288, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3610>, 281.95998402440654), ('congestion', 281.95998402440654, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfb3110>, 286.26683881994074), ('congestion', 286.26683881994074, 'agent_2', 'e_(3, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9bd0>, 289.0389507300585), ('congestion', 289.0389507300585, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 293.56959220176657), ('congestion', 293.56959220176657, 'agent_2', 'e_(1, 4)_(1, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9610>, 296.08579520458346), ('congestion', 296.08579520458346, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9ad0>, 298.35484774069295), ('congestion', 298.35484774069295, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9610>, 301.2108956782028), ('congestion', 301.21089567820286, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9ad0>, 304.84013193284676), ('congestion', 304.84013193284676, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9610>, 306.8700384629933), ('congestion', 306.87003846299336, 'agent_2', 'e_(1, 3)_(2, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9ad0>, 309.9950960081044), ('congestion', 309.9950960081044, 'agent_2', 'e_(2, 3)_(1, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9610>, 312.2610971452009), ('congestion', 312.2610971452009, 'agent_2', 'e_(1, 3)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 314.51580410933053), ('congestion', 314.51580410933053, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 317.60061749084656), ('congestion', 317.60061749084656, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bf96910>, 319.52716953905025), ('congestion', 319.52716953905025, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 322.9091441598342), ('congestion', 322.9091441598342, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 325.2464519769936), ('congestion', 325.2464519769936, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 326.9999555812561), ('congestion', 326.999955581256, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 329.2034218127702), ('congestion', 329.2034218127702, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 333.22958170659626), ('congestion', 333.22958170659626, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 336.38805780697544), ('congestion', 336.38805780697544, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 340.7304695203001), ('congestion', 340.7304695203001, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 343.4086318262482), ('congestion', 343.4086318262482, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 346.2067363231435), ('congestion', 346.2067363231435, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 349.13978367077215), ('congestion', 349.13978367077215, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 351.6049048225274), ('congestion', 351.6049048225274, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bf96910>, 356.84785455983604), ('congestion', 356.84785455983604, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 359.2453656650649), ('congestion', 359.245365665065, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa96d0>, 360.92370428203384), ('congestion', 360.92370428203384, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9290>, 363.6153337787119), ('congestion', 363.61533377871183, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bf96910>, 366.7519124016881), ('congestion', 366.7519124016881, 'agent_2', 'e_(0, 3)_(0, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bf99e10>, 370.99170424811894), ('congestion', 370.9917042481189, 'agent_2', 'e_(0, 2)_(0, 1)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f984561a5d0>, 374.5135911464817), ('congestion', 374.5135911464817, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f98455c0bd0>, 377.56500948781115), ('congestion', 377.5650094878112, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9310>, 380.5521556688431), ('congestion', 380.55215566884317, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f98455c0bd0>, 385.42334386543916), ('congestion', 385.42334386543916, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9310>, 389.46970859211245), ('congestion', 389.46970859211245, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f98455c0bd0>, 390.6873948906409), ('congestion', 390.6873948906409, 'agent_2', 'e_(0, 0)_(0, 1)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f984561a5d0>, 393.3764464007784), ('congestion', 393.3764464007783, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f98455c0bd0>, 395.4585004487343), ('congestion', 395.45850044873436, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa9310>, 397.0554949975319), ('congestion', 397.0554949975319, 'agent_2', 'e_(1, 0)_(2, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7f982bfa97d0>, 401.04234794876874)]}
...frames: 5985...
[DEBUG 15:48:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:30] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 15:48:30] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:48:30] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:48:30] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 15:48:30] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:31] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:32] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:33] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:34] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:35] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:36] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:37] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:38] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:39] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:40] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:41] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:42] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:43] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:58] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:48:59] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:00] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:01] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:02] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:03] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:04] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:05] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:06] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:07] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:08] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:09] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:10] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:11] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:12] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:13] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:14] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:15] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:16] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:17] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:18] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:19] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:20] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:21] matplotlib.axes._base top of axes not in the figure, so title not moved
