[INFO 13:44:23] pymarl Running command 'my_main'
[INFO 13:44:23] pymarl Started run with ID "67"
[DEBUG 13:44:23] pymarl Starting Heartbeat
[DEBUG 13:44:23] my_main Started
[WARNING 13:44:23] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 13:44:23] my_main Experiment Parameters:
[INFO 13:44:23] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'camas',
    'env_args': {   'debug': False,
                    'map_name': 'bruno',
                    'seed': 371250544},
    'epsilon_anneal_time': 50000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 1.0,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 2000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 2000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'async',
    'runner_log_interval': 2000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 371250544,
    't_max': 500000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 2000,
    'test_nepisode': 20,
    'use_cuda': False,
    'use_tensorboard': False}

*** Creating env, config: {} ***
[DEBUG 13:44:23] root Connecting n_0_0 to n_0_1 with n_0_0_n_0_1
[DEBUG 13:44:23] root Connecting n_0_0 to n_1_0 with n_0_0_n_1_0
[DEBUG 13:44:23] root Connecting n_0_1 to n_0_2 with n_0_1_n_0_2
[DEBUG 13:44:23] root Connecting n_0_1 to n_0_0 with n_0_1_n_0_0
[DEBUG 13:44:23] root Connecting n_0_2 to n_0_3 with n_0_2_n_0_3
[DEBUG 13:44:23] root Connecting n_0_2 to n_0_1 with n_0_2_n_0_1
[DEBUG 13:44:23] root Connecting n_0_3 to n_0_2 with n_0_3_n_0_2
[DEBUG 13:44:23] root Connecting n_0_3 to n_1_3 with n_0_3_n_1_3
[DEBUG 13:44:23] root Connecting n_1_0 to n_1_1 with n_1_0_n_1_1
[DEBUG 13:44:23] root Connecting n_1_0 to n_0_0 with n_1_0_n_0_0
[DEBUG 13:44:23] root Connecting n_1_0 to n_2_0 with n_1_0_n_2_0
[DEBUG 13:44:23] root Connecting n_1_1 to n_1_2 with n_1_1_n_1_2
[DEBUG 13:44:23] root Connecting n_1_1 to n_1_0 with n_1_1_n_1_0
[DEBUG 13:44:23] root Connecting n_1_2 to n_1_3 with n_1_2_n_1_3
[DEBUG 13:44:23] root Connecting n_1_2 to n_1_1 with n_1_2_n_1_1
[DEBUG 13:44:23] root Connecting n_1_3 to n_1_2 with n_1_3_n_1_2
[DEBUG 13:44:23] root Connecting n_1_3 to n_0_3 with n_1_3_n_0_3
[DEBUG 13:44:23] root Connecting n_1_3 to n_2_3 with n_1_3_n_2_3
[DEBUG 13:44:23] root Connecting n_2_0 to n_2_1 with n_2_0_n_2_1
[DEBUG 13:44:23] root Connecting n_2_0 to n_1_0 with n_2_0_n_1_0
[DEBUG 13:44:23] root Connecting n_2_1 to n_2_2 with n_2_1_n_2_2
[DEBUG 13:44:23] root Connecting n_2_1 to n_2_0 with n_2_1_n_2_0
[DEBUG 13:44:23] root Connecting n_2_2 to n_2_3 with n_2_2_n_2_3
[DEBUG 13:44:23] root Connecting n_2_2 to n_2_1 with n_2_2_n_2_1
[DEBUG 13:44:23] root Connecting n_2_3 to n_2_2 with n_2_3_n_2_2
[DEBUG 13:44:23] root Connecting n_2_3 to n_1_3 with n_2_3_n_1_3
[INFO 13:44:23] my_main Beginning training for 500000 timesteps
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /Users/runner/miniforge3/conda-bld/pytorch-recipe_1643121251270/work/torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 13:44:23] my_main t_env: 50 / 500000
[INFO 13:44:23] my_main Estimated time left: 18 seconds. Time passed: 0 seconds
final data {'state': [array([32, 32,  9])], 'obs': [array([[32., 32.,  9.],
       [32., 32.,  9.],
       [ 9., 32., 32.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([9, 7, 7])], 'obs': [array([[9., 7., 7.],
       [7., 9., 7.],
       [7., 9., 7.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([32,  9, 32])], 'obs': [array([[32.,  9., 32.],
       [ 9., 32., 32.],
       [32., 32.,  9.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 9, 31, 31])], 'obs': [array([[ 9., 31., 31.],
       [31.,  9., 31.],
       [31.,  9., 31.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([ 7, 32,  8])], 'obs': [array([[ 7., 32.,  8.],
       [32.,  7.,  8.],
       [ 8.,  7., 32.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 1., 0.],
       [0., 1., 1., 0., 0.]])]}
final data {'state': [array([10, 32, 31])], 'obs': [array([[10., 32., 31.],
       [32., 10., 31.],
       [31., 10., 32.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([32, 10, 35])], 'obs': [array([[32., 10., 35.],
       [10., 32., 35.],
       [35., 32., 10.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([ 9, 35, 31])], 'obs': [array([[ 9., 35., 31.],
       [35.,  9., 31.],
       [31.,  9., 35.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([33, 10, 34])], 'obs': [array([[33., 10., 34.],
       [10., 33., 34.],
       [34., 33., 10.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([11, 32, 32])], 'obs': [array([[11., 32., 32.],
       [32., 11., 32.],
       [32., 11., 32.]])], 'avail_actions': [array([[0., 0., 1., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 7,  8, 32])], 'obs': [array([[ 7.,  8., 32.],
       [ 8.,  7., 32.],
       [32.,  7.,  8.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 9, 32, 32])], 'obs': [array([[ 9., 32., 32.],
       [32.,  9., 32.],
       [32.,  9., 32.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 7, 32,  8])], 'obs': [array([[ 7., 32.,  8.],
       [32.,  7.,  8.],
       [ 8.,  7., 32.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 1., 0.],
       [0., 1., 1., 0., 0.]])]}
final data {'state': [array([37, 10,  7])], 'obs': [array([[37., 10.,  7.],
       [10., 37.,  7.],
       [ 7., 37., 10.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([32, 10, 31])], 'obs': [array([[32., 10., 31.],
       [10., 32., 31.],
       [31., 32., 10.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([31, 31,  9])], 'obs': [array([[31., 31.,  9.],
       [31., 31.,  9.],
       [ 9., 31., 31.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([7, 7, 7])], 'obs': [array([[7., 7., 7.],
       [7., 7., 7.],
       [7., 7., 7.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([ 7, 31,  9])], 'obs': [array([[ 7., 31.,  9.],
       [31.,  7.,  9.],
       [ 9.,  7., 31.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([34, 31, 11])], 'obs': [array([[34., 31., 11.],
       [31., 34., 11.],
       [11., 34., 31.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 1., 0.]])]}
final data {'state': [array([9, 7, 7])], 'obs': [array([[9., 7., 7.],
       [7., 9., 7.],
       [7., 9., 7.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
av test time: 155.3606487488842, av step count 49.35, 20 episodes
[INFO 13:44:29] my_main Recent Stats | t_env:       2024 | Episode:       48
ep_length_mean:           50.0000	epsilon:                   1.0000	grad_norm:               183101.8125	loss:                    29595.9473
q_taken_mean:             80.9114	return_mean:             -121.6234	return_std:                0.0000	target_mean:              84.1361
td_error_abs:            117.8449	test_ep_length_mean:      49.3500	test_return_mean:        -155.3606	test_return_std:          33.1775

[INFO 13:44:29] my_main t_env: 2074 / 500000
[INFO 13:44:29] my_main Estimated time left: 21 minutes, 23 seconds. Time passed: 5 seconds
final data {'state': [array([35, 34,  4])], 'obs': [array([[35., 34.,  4.],
       [34., 35.,  4.],
       [ 4., 35., 34.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([31, 11, 23])], 'obs': [array([[31., 11., 23.],
       [11., 31., 23.],
       [23., 31., 11.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([33, 11, 21])], 'obs': [array([[33., 11., 21.],
       [11., 33., 21.],
       [21., 33., 11.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 1., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([34, 37,  5])], 'obs': [array([[34., 37.,  5.],
       [37., 34.,  5.],
       [ 5., 34., 37.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([37, 37,  4])], 'obs': [array([[37., 37.,  4.],
       [37., 37.,  4.],
       [ 4., 37., 37.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([37, 33,  4])], 'obs': [array([[37., 33.,  4.],
       [33., 37.,  4.],
       [ 4., 37., 33.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([35, 10, 21])], 'obs': [array([[35., 10., 21.],
       [10., 35., 21.],
       [21., 35., 10.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([37, 35,  5])], 'obs': [array([[37., 35.,  5.],
       [35., 37.,  5.],
       [ 5., 37., 35.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([33, 33,  4])], 'obs': [array([[33., 33.,  4.],
       [33., 33.,  4.],
       [ 4., 33., 33.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([37, 35,  5])], 'obs': [array([[37., 35.,  5.],
       [35., 37.,  5.],
       [ 5., 37., 35.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([37, 35,  5])], 'obs': [array([[37., 35.,  5.],
       [35., 37.,  5.],
       [ 5., 37., 35.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([ 9, 31, 23])], 'obs': [array([[ 9., 31., 23.],
       [31.,  9., 23.],
       [23.,  9., 31.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([35, 37,  5])], 'obs': [array([[35., 37.,  5.],
       [37., 35.,  5.],
       [ 5., 35., 37.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([37, 37,  4])], 'obs': [array([[37., 37.,  4.],
       [37., 37.,  4.],
       [ 4., 37., 37.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([11, 32, 21])], 'obs': [array([[11., 32., 21.],
       [32., 11., 21.],
       [21., 11., 32.]])], 'avail_actions': [array([[0., 0., 1., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([37, 37,  4])], 'obs': [array([[37., 37.,  4.],
       [37., 37.,  4.],
       [ 4., 37., 37.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([34, 31,  4])], 'obs': [array([[34., 31.,  4.],
       [31., 34.,  4.],
       [ 4., 34., 31.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([10, 33, 23])], 'obs': [array([[10., 33., 23.],
       [33., 10., 23.],
       [23., 10., 33.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([33, 10, 23])], 'obs': [array([[33., 10., 23.],
       [10., 33., 23.],
       [23., 33., 10.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([37, 34,  5])], 'obs': [array([[37., 34.,  5.],
       [34., 37.,  5.],
       [ 5., 37., 34.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.]])]}
av test time: 70.28307143297897, av step count 50.0, 20 episodes
[INFO 13:44:36] my_main Recent Stats | t_env:       4030 | Episode:       93
ep_length_mean:           46.0833	epsilon:                   0.9615	grad_norm:               125044.1094	loss:                    20620.3682
q_taken_mean:             82.3573	return_mean:             -102.2423	return_std:               12.7089	target_mean:              82.8199
td_error_abs:            100.1933	test_ep_length_mean:      49.6750	test_return_mean:        -112.8219	test_return_std:          19.6744

[INFO 13:44:36] my_main t_env: 4080 / 500000
[INFO 13:44:36] my_main Estimated time left: 28 minutes, 50 seconds. Time passed: 12 seconds
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([25,  9, 21])], 'obs': [array([[25.,  9., 21.],
       [ 9., 25., 21.],
       [21., 25.,  9.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
av test time: 109.8274094806903, av step count 50.0, 20 episodes
[INFO 13:44:43] my_main Recent Stats | t_env:       6030 | Episode:      140
ep_length_mean:           45.5815	epsilon:                   0.9234	grad_norm:               121768.7578	loss:                    16904.5443
q_taken_mean:             78.2228	return_mean:             -95.8754	return_std:               16.1001	target_mean:              81.9647
td_error_abs:             91.0093	test_ep_length_mean:      49.7833	test_return_mean:        -111.8237	test_return_std:          16.9596

[INFO 13:44:43] my_main t_env: 6103 / 500000
[INFO 13:44:43] my_main Estimated time left: 29 minutes, 31 seconds. Time passed: 19 seconds
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([32, 32,  4])], 'obs': [array([[32., 32.,  4.],
       [32., 32.,  4.],
       [ 4., 32., 32.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([23,  8, 21])], 'obs': [array([[23.,  8., 21.],
       [ 8., 23., 21.],
       [21., 23.,  8.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 1., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([21, 31,  5])], 'obs': [array([[21., 31.,  5.],
       [31., 21.,  5.],
       [ 5., 21., 31.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([23, 31,  4])], 'obs': [array([[23., 31.,  4.],
       [31., 23.,  4.],
       [ 4., 23., 31.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21, 31,  5])], 'obs': [array([[21., 31.,  5.],
       [31., 21.,  5.],
       [ 5., 21., 31.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([ 7, 32,  0])], 'obs': [array([[ 7., 32.,  0.],
       [32.,  7.,  0.],
       [ 0.,  7., 32.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 1., 0.],
       [1., 1., 0., 0., 0.]])]}
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([23, 32,  5])], 'obs': [array([[23., 32.,  5.],
       [32., 23.,  5.],
       [ 5., 23., 32.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([23,  8, 21])], 'obs': [array([[23.,  8., 21.],
       [ 8., 23., 21.],
       [21., 23.,  8.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 1., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21, 32,  4])], 'obs': [array([[21., 32.,  4.],
       [32., 21.,  4.],
       [ 4., 21., 32.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([ 7, 31,  4])], 'obs': [array([[ 7., 31.,  4.],
       [31.,  7.,  4.],
       [ 4.,  7., 31.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([21, 32,  4])], 'obs': [array([[21., 32.,  4.],
       [32., 21.,  4.],
       [ 4., 21., 32.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0.],
       [1., 1., 1., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
av test time: 83.84713536244512, av step count 50.0, 20 episodes
[INFO 13:44:50] my_main Recent Stats | t_env:       8058 | Episode:      189
ep_length_mean:           44.7226	epsilon:                   0.8850	grad_norm:               124082.5547	loss:                    15042.2332
q_taken_mean:             76.5875	return_mean:             -93.4201	return_std:               21.1861	target_mean:              81.8542
td_error_abs:             85.8542	test_ep_length_mean:      49.8375	test_return_mean:        -104.8296	test_return_std:          15.7729

[INFO 13:44:50] my_main t_env: 8108 / 500000
[INFO 13:44:50] my_main Estimated time left: 30 minutes, 9 seconds. Time passed: 26 seconds
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([23,  9, 23])], 'obs': [array([[23.,  9., 23.],
       [ 9., 23., 23.],
       [23., 23.,  9.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 5, 31, 21])], 'obs': [array([[ 5., 31., 21.],
       [31.,  5., 21.],
       [21.,  5., 31.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([ 4, 32, 21])], 'obs': [array([[ 4., 32., 21.],
       [32.,  4., 21.],
       [21.,  4., 32.]])], 'avail_actions': [array([[1., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([ 7,  9, 13])], 'obs': [array([[ 7.,  9., 13.],
       [ 9.,  7., 13.],
       [13.,  7.,  9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [1., 0., 0., 0., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([23,  8, 21])], 'obs': [array([[23.,  8., 21.],
       [ 8., 23., 21.],
       [21., 23.,  8.]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 1., 0., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([21,  9, 21])], 'obs': [array([[21.,  9., 21.],
       [ 9., 21., 21.],
       [21., 21.,  9.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 0., 1., 0.],
       [0., 1., 0., 0., 0.]])]}
final data {'state': [array([7, 7, 9])], 'obs': [array([[7., 7., 9.],
       [7., 7., 9.],
       [9., 7., 7.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.]])]}
final data {'state': [array([7, 9, 7])], 'obs': [array([[7., 9., 7.],
       [9., 7., 7.],
       [7., 7., 9.]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([21,  8, 23])], 'obs': [array([[21.,  8., 23.],
       [ 8., 21., 23.],
       [23., 21.,  8.]])], 'avail_actions': [array([[0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0.]])]}
final data {'state': [array([ 5, 32, 23])], 'obs': [array([[ 5., 32., 23.],
       [32.,  5., 23.],
       [23.,  5., 32.]])], 'avail_actions': [array([[0., 1., 0., 1., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 1., 0.]])]}
av test time: 90.97412080011273, av step count 50.0, 20 episodes
[INFO 13:44:53] my_main Updated target network
