[INFO 15:49:37] pymarl Running command 'my_main'
[INFO 15:49:37] pymarl Started run with ID "274"
[DEBUG 15:49:37] pymarl Starting Heartbeat
[DEBUG 15:49:37] my_main Started
[WARNING 15:49:37] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 15:49:37] my_main Experiment Parameters:
[INFO 15:49:37] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': 'results/models/qmix__2022-02-28_00-02-36',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'camas',
    'env_args': {   'debug': False,
                    'goal_reward': 0,
                    'map_name': 'grid-small',
                    'observation_type': 'global',
                    'ptd_mean': 1.0,
                    'ptd_var': 0.1,
                    'reward_scaling_factor': 100,
                    'seed': 513976663,
                    'time_multiplier': 1},
    'epsilon_anneal_time': 500000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'render',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 513976663,
    't_max': 5100000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': False,
    'use_tensorboard': True}

[DEBUG 15:49:42] tensorflow Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
[DEBUG 15:49:42] h5py._conv Creating converter from 7 to 5
[DEBUG 15:49:42] h5py._conv Creating converter from 5 to 7
[DEBUG 15:49:42] h5py._conv Creating converter from 7 to 5
[DEBUG 15:49:42] h5py._conv Creating converter from 5 to 7
[DEBUG 15:49:44] my_main Rendering runner initialised
*** Creating Camas Zoo Env ***
Map parameters: {'episode_timestep_limit': 500, 'max_agents': 5, 'initial': {'agent_0': ('(3, 4)', '(4, 2)'), 'agent_1': ('(4, 1)', '(4, 4)'), 'agent_2': ('(0, 4)', '(2, 0)'), 'agent_3': ('(1, 1)', '(2, 2)'), 'agent_4': ('(2, 1)', '(3, 3)')}, 'generator': 'grid', 'size': (5, 5), 'anna_map': True}
[DEBUG 15:49:44] root Connecting (0, 0) to (0, 1) with e_(0, 0)_(0, 1)
[DEBUG 15:49:44] root Connecting (0, 0) to (1, 0) with e_(0, 0)_(1, 0)
[DEBUG 15:49:44] root Connecting (0, 1) to (0, 0) with e_(0, 1)_(0, 0)
[DEBUG 15:49:44] root Connecting (0, 1) to (0, 2) with e_(0, 1)_(0, 2)
[DEBUG 15:49:44] root Connecting (0, 1) to (1, 1) with e_(0, 1)_(1, 1)
[DEBUG 15:49:44] root Connecting (0, 2) to (0, 1) with e_(0, 2)_(0, 1)
[DEBUG 15:49:44] root Connecting (0, 2) to (0, 3) with e_(0, 2)_(0, 3)
[DEBUG 15:49:44] root Connecting (0, 2) to (1, 2) with e_(0, 2)_(1, 2)
[DEBUG 15:49:44] root Connecting (0, 3) to (0, 2) with e_(0, 3)_(0, 2)
[DEBUG 15:49:44] root Connecting (0, 3) to (0, 4) with e_(0, 3)_(0, 4)
[DEBUG 15:49:44] root Connecting (0, 3) to (1, 3) with e_(0, 3)_(1, 3)
[DEBUG 15:49:44] root Connecting (0, 4) to (0, 3) with e_(0, 4)_(0, 3)
[DEBUG 15:49:44] root Connecting (0, 4) to (1, 4) with e_(0, 4)_(1, 4)
[DEBUG 15:49:44] root Connecting (1, 0) to (0, 0) with e_(1, 0)_(0, 0)
[DEBUG 15:49:44] root Connecting (1, 0) to (1, 1) with e_(1, 0)_(1, 1)
[DEBUG 15:49:44] root Connecting (1, 0) to (2, 0) with e_(1, 0)_(2, 0)
[DEBUG 15:49:44] root Connecting (1, 1) to (0, 1) with e_(1, 1)_(0, 1)
[DEBUG 15:49:44] root Connecting (1, 1) to (1, 0) with e_(1, 1)_(1, 0)
[DEBUG 15:49:44] root Connecting (1, 1) to (1, 2) with e_(1, 1)_(1, 2)
[DEBUG 15:49:44] root Connecting (1, 1) to (2, 1) with e_(1, 1)_(2, 1)
[DEBUG 15:49:44] root Connecting (1, 2) to (0, 2) with e_(1, 2)_(0, 2)
[DEBUG 15:49:44] root Connecting (1, 2) to (1, 1) with e_(1, 2)_(1, 1)
[DEBUG 15:49:44] root Connecting (1, 2) to (1, 3) with e_(1, 2)_(1, 3)
[DEBUG 15:49:44] root Connecting (1, 2) to (2, 2) with e_(1, 2)_(2, 2)
[DEBUG 15:49:44] root Connecting (1, 3) to (0, 3) with e_(1, 3)_(0, 3)
[DEBUG 15:49:44] root Connecting (1, 3) to (1, 2) with e_(1, 3)_(1, 2)
[DEBUG 15:49:44] root Connecting (1, 3) to (1, 4) with e_(1, 3)_(1, 4)
[DEBUG 15:49:44] root Connecting (1, 3) to (2, 3) with e_(1, 3)_(2, 3)
[DEBUG 15:49:44] root Connecting (1, 4) to (0, 4) with e_(1, 4)_(0, 4)
[DEBUG 15:49:44] root Connecting (1, 4) to (1, 3) with e_(1, 4)_(1, 3)
[DEBUG 15:49:44] root Connecting (1, 4) to (2, 4) with e_(1, 4)_(2, 4)
[DEBUG 15:49:44] root Connecting (2, 0) to (1, 0) with e_(2, 0)_(1, 0)
[DEBUG 15:49:44] root Connecting (2, 0) to (2, 1) with e_(2, 0)_(2, 1)
[DEBUG 15:49:44] root Connecting (2, 0) to (3, 0) with e_(2, 0)_(3, 0)
[DEBUG 15:49:44] root Connecting (2, 1) to (1, 1) with e_(2, 1)_(1, 1)
[DEBUG 15:49:44] root Connecting (2, 1) to (2, 0) with e_(2, 1)_(2, 0)
[DEBUG 15:49:44] root Connecting (2, 1) to (2, 2) with e_(2, 1)_(2, 2)
[DEBUG 15:49:44] root Connecting (2, 1) to (3, 1) with e_(2, 1)_(3, 1)
[DEBUG 15:49:44] root Connecting (2, 2) to (1, 2) with e_(2, 2)_(1, 2)
[DEBUG 15:49:44] root Connecting (2, 2) to (2, 1) with e_(2, 2)_(2, 1)
[DEBUG 15:49:44] root Connecting (2, 2) to (2, 3) with e_(2, 2)_(2, 3)
[DEBUG 15:49:44] root Connecting (2, 2) to (3, 2) with e_(2, 2)_(3, 2)
[DEBUG 15:49:44] root Connecting (2, 3) to (1, 3) with e_(2, 3)_(1, 3)
[DEBUG 15:49:44] root Connecting (2, 3) to (2, 2) with e_(2, 3)_(2, 2)
[DEBUG 15:49:44] root Connecting (2, 3) to (2, 4) with e_(2, 3)_(2, 4)
[DEBUG 15:49:44] root Connecting (2, 3) to (3, 3) with e_(2, 3)_(3, 3)
[DEBUG 15:49:44] root Connecting (2, 4) to (1, 4) with e_(2, 4)_(1, 4)
[DEBUG 15:49:44] root Connecting (2, 4) to (2, 3) with e_(2, 4)_(2, 3)
[DEBUG 15:49:44] root Connecting (2, 4) to (3, 4) with e_(2, 4)_(3, 4)
[DEBUG 15:49:44] root Connecting (3, 0) to (2, 0) with e_(3, 0)_(2, 0)
[DEBUG 15:49:44] root Connecting (3, 0) to (3, 1) with e_(3, 0)_(3, 1)
[DEBUG 15:49:44] root Connecting (3, 0) to (4, 0) with e_(3, 0)_(4, 0)
[DEBUG 15:49:44] root Connecting (3, 1) to (2, 1) with e_(3, 1)_(2, 1)
[DEBUG 15:49:44] root Connecting (3, 1) to (3, 0) with e_(3, 1)_(3, 0)
[DEBUG 15:49:44] root Connecting (3, 1) to (3, 2) with e_(3, 1)_(3, 2)
[DEBUG 15:49:44] root Connecting (3, 1) to (4, 1) with e_(3, 1)_(4, 1)
[DEBUG 15:49:44] root Connecting (3, 2) to (2, 2) with e_(3, 2)_(2, 2)
[DEBUG 15:49:44] root Connecting (3, 2) to (3, 1) with e_(3, 2)_(3, 1)
[DEBUG 15:49:44] root Connecting (3, 2) to (3, 3) with e_(3, 2)_(3, 3)
[DEBUG 15:49:44] root Connecting (3, 2) to (4, 2) with e_(3, 2)_(4, 2)
[DEBUG 15:49:44] root Connecting (3, 3) to (2, 3) with e_(3, 3)_(2, 3)
[DEBUG 15:49:44] root Connecting (3, 3) to (3, 2) with e_(3, 3)_(3, 2)
[DEBUG 15:49:44] root Connecting (3, 3) to (3, 4) with e_(3, 3)_(3, 4)
[DEBUG 15:49:44] root Connecting (3, 3) to (4, 3) with e_(3, 3)_(4, 3)
[DEBUG 15:49:44] root Connecting (3, 4) to (2, 4) with e_(3, 4)_(2, 4)
[DEBUG 15:49:44] root Connecting (3, 4) to (3, 3) with e_(3, 4)_(3, 3)
[DEBUG 15:49:44] root Connecting (3, 4) to (4, 4) with e_(3, 4)_(4, 4)
[DEBUG 15:49:44] root Connecting (4, 0) to (3, 0) with e_(4, 0)_(3, 0)
[DEBUG 15:49:44] root Connecting (4, 0) to (4, 1) with e_(4, 0)_(4, 1)
[DEBUG 15:49:44] root Connecting (4, 1) to (3, 1) with e_(4, 1)_(3, 1)
[DEBUG 15:49:44] root Connecting (4, 1) to (4, 0) with e_(4, 1)_(4, 0)
[DEBUG 15:49:44] root Connecting (4, 1) to (4, 2) with e_(4, 1)_(4, 2)
[DEBUG 15:49:44] root Connecting (4, 2) to (3, 2) with e_(4, 2)_(3, 2)
[DEBUG 15:49:44] root Connecting (4, 2) to (4, 1) with e_(4, 2)_(4, 1)
[DEBUG 15:49:44] root Connecting (4, 2) to (4, 3) with e_(4, 2)_(4, 3)
[DEBUG 15:49:44] root Connecting (4, 3) to (3, 3) with e_(4, 3)_(3, 3)
[DEBUG 15:49:44] root Connecting (4, 3) to (4, 2) with e_(4, 3)_(4, 2)
[DEBUG 15:49:44] root Connecting (4, 3) to (4, 4) with e_(4, 3)_(4, 4)
[DEBUG 15:49:44] root Connecting (4, 4) to (3, 4) with e_(4, 4)_(3, 4)
[DEBUG 15:49:44] root Connecting (4, 4) to (4, 3) with e_(4, 4)_(4, 3)
Possible agents ['agent_0', 'agent_1', 'agent_2', 'agent_3', 'agent_4']
Goal states {'agent_0': '(4, 2)', 'agent_1': '(4, 4)', 'agent_2': '(2, 0)', 'agent_3': '(2, 2)', 'agent_4': '(3, 3)'} 
Initial states {'agent_0': '(3, 4)', 'agent_1': '(4, 1)', 'agent_2': '(0, 4)', 'agent_3': '(1, 1)', 'agent_4': '(2, 1)'}
[DEBUG 15:49:44] my_main Buffer scheme: {'state': {'vshape': (5,)}, 'obs': {'vshape': 5, 'group': 'agents'}, 'actions': {'vshape': (1,), 'group': 'agents', 'dtype': torch.int64}, 'avail_actions': {'vshape': (5,), 'group': 'agents', 'dtype': torch.int32}, 'reward': {'vshape': (1,)}, 'terminated': {'vshape': (1,), 'dtype': torch.uint8}}, groups: {'agents': 5}
timesteps [3000918, 1000328, 500259, 2500872, 2000754, 223, 1500728, 4001118, 3501011]
[INFO 15:49:44] my_main Loading model from results/models/qmix__2022-02-28_00-02-36/4001118
[INFO 15:49:44] my_main Beginning training for 5100000 timesteps
*** reset environment ***
-- step 1 
State: [0.18095238 0.2        0.03809524 0.05714286 0.1047619 ], Agent: agent_0, Time: 0.0
Pre transition data: {'state': [array([0.18095238, 0.2       , 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.18095238, 0.2       , 0.03809524, 0.05714286, 0.1047619 ],
       [0.2       , 0.18095238, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.18095238, 0.2       , 0.05714286, 0.1047619 ],
       [0.05714286, 0.18095238, 0.2       , 0.03809524, 0.1047619 ],
       [0.1047619 , 0.18095238, 0.2       , 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /Users/runner/miniforge3/conda-bld/pytorch-recipe_1643121251270/work/torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
Actions: tensor([[0, 4, 4, 4, 4]])
Reward -0.0, Time 0.0
/Users/alexrutherford/repos/pymarl/src/components/episode_buffer.py:119: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
-- step 2 
State: [0.86666667 0.2        0.03809524 0.05714286 0.1047619 ], Agent: agent_1, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.2       , 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.2       , 0.03809524, 0.05714286, 0.1047619 ],
       [0.2       , 0.86666667, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.86666667, 0.2       , 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.2       , 0.03809524, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.2       , 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 4, 4, 4]])
Reward -0.0, Time 0.0
-- step 3 
State: [0.86666667 0.91428571 0.03809524 0.05714286 0.1047619 ], Agent: agent_2, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.03809524, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.03809524, 0.05714286, 0.1047619 ],
       [0.91428571, 0.86666667, 0.03809524, 0.05714286, 0.1047619 ],
       [0.03809524, 0.86666667, 0.91428571, 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.91428571, 0.03809524, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.03809524, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 0, 4, 4]])
Reward -0.0, Time 0.0
-- step 4 
State: [0.86666667 0.91428571 0.35238095 0.05714286 0.1047619 ], Agent: agent_3, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.05714286, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.05714286, 0.1047619 ],
       [0.91428571, 0.86666667, 0.35238095, 0.05714286, 0.1047619 ],
       [0.35238095, 0.86666667, 0.91428571, 0.05714286, 0.1047619 ],
       [0.05714286, 0.86666667, 0.91428571, 0.35238095, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.35238095, 0.05714286]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[0, 1, 0, 0, 4]])
Reward -0.0, Time 0.0
-- step 5 
State: [0.86666667 0.91428571 0.35238095 0.41904762 0.1047619 ], Agent: agent_4, Time: 0.0
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.1047619 ])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.1047619 ],
       [0.91428571, 0.86666667, 0.35238095, 0.41904762, 0.1047619 ],
       [0.35238095, 0.86666667, 0.91428571, 0.41904762, 0.1047619 ],
       [0.41904762, 0.86666667, 0.91428571, 0.35238095, 0.1047619 ],
       [0.1047619 , 0.86666667, 0.91428571, 0.35238095, 0.41904762]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[0, 1, 0, 0, 0]])
Reward -0.022530508934413634, Time 2.2530508934413636
-- step 6 
State: [0.86666667 0.91428571 0.35238095 0.41904762 0.15238095], Agent: agent_4, Time: 2.2530508934413636
Pre transition data: {'state': [array([0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.15238095])], 'obs': [array([[0.86666667, 0.91428571, 0.35238095, 0.41904762, 0.15238095],
       [0.91428571, 0.86666667, 0.35238095, 0.41904762, 0.15238095],
       [0.35238095, 0.86666667, 0.91428571, 0.41904762, 0.15238095],
       [0.41904762, 0.86666667, 0.91428571, 0.35238095, 0.15238095],
       [0.15238095, 0.86666667, 0.91428571, 0.35238095, 0.41904762]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[0, 1, 0, 0, 0]])
Reward -0.0037151250626926524, Time 2.624563399710629
-- step 7 
State: [0.86666667 0.20952381 0.35238095 0.41904762 0.76190476], Agent: agent_1, Time: 2.624563399710629
Pre transition data: {'state': [array([0.86666667, 0.20952381, 0.35238095, 0.41904762, 0.76190476])], 'obs': [array([[0.86666667, 0.20952381, 0.35238095, 0.41904762, 0.76190476],
       [0.20952381, 0.86666667, 0.35238095, 0.41904762, 0.76190476],
       [0.35238095, 0.86666667, 0.20952381, 0.41904762, 0.76190476],
       [0.41904762, 0.86666667, 0.20952381, 0.35238095, 0.76190476],
       [0.76190476, 0.86666667, 0.20952381, 0.35238095, 0.41904762]])], 'avail_actions': [array([[1., 0., 0., 0., 0.],
       [0., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[0, 1, 0, 0, 0]])
Reward -0.003233250990457539, Time 2.9478884987563827
-- step 8 
State: [0.22857143 0.94285714 0.35238095 0.41904762 0.76190476], Agent: agent_0, Time: 2.9478884987563827
Pre transition data: {'state': [array([0.22857143, 0.94285714, 0.35238095, 0.41904762, 0.76190476])], 'obs': [array([[0.22857143, 0.94285714, 0.35238095, 0.41904762, 0.76190476],
       [0.94285714, 0.22857143, 0.35238095, 0.41904762, 0.76190476],
       [0.35238095, 0.22857143, 0.94285714, 0.41904762, 0.76190476],
       [0.41904762, 0.22857143, 0.94285714, 0.35238095, 0.76190476],
       [0.76190476, 0.22857143, 0.94285714, 0.35238095, 0.41904762]])], 'avail_actions': [array([[0., 0., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 0, 0]])
Reward -0.00038052518731161554, Time 2.9859410174875443
-- step 9 
State: [0.99047619 0.94285714 0.08571429 0.41904762 0.76190476], Agent: agent_2, Time: 2.9859410174875443
Pre transition data: {'state': [array([0.99047619, 0.94285714, 0.08571429, 0.41904762, 0.76190476])], 'obs': [array([[0.99047619, 0.94285714, 0.08571429, 0.41904762, 0.76190476],
       [0.94285714, 0.99047619, 0.08571429, 0.41904762, 0.76190476],
       [0.08571429, 0.99047619, 0.94285714, 0.41904762, 0.76190476],
       [0.41904762, 0.99047619, 0.94285714, 0.08571429, 0.76190476],
       [0.76190476, 0.99047619, 0.94285714, 0.08571429, 0.41904762]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 0, 0]])
Reward -0.007421145623023895, Time 3.7280555797899337
-- step 10 
State: [0.99047619 0.94285714 0.52380952 0.1047619  0.76190476], Agent: agent_3, Time: 3.7280555797899337
Pre transition data: {'state': [array([0.99047619, 0.94285714, 0.52380952, 0.1047619 , 0.76190476])], 'obs': [array([[0.99047619, 0.94285714, 0.52380952, 0.1047619 , 0.76190476],
       [0.94285714, 0.99047619, 0.52380952, 0.1047619 , 0.76190476],
       [0.52380952, 0.99047619, 0.94285714, 0.1047619 , 0.76190476],
       [0.1047619 , 0.99047619, 0.94285714, 0.52380952, 0.76190476],
       [0.76190476, 0.99047619, 0.94285714, 0.52380952, 0.1047619 ]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [1., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 1, 0]])
Reward -0.01077608324090689, Time 4.805663903880623
-- step 11 
State: [0.99047619 0.94285714 0.13333333 0.58095238 0.76190476], Agent: agent_2, Time: 4.805663903880623
Pre transition data: {'state': [array([0.99047619, 0.94285714, 0.13333333, 0.58095238, 0.76190476])], 'obs': [array([[0.99047619, 0.94285714, 0.13333333, 0.58095238, 0.76190476],
       [0.94285714, 0.99047619, 0.13333333, 0.58095238, 0.76190476],
       [0.13333333, 0.99047619, 0.94285714, 0.58095238, 0.76190476],
       [0.58095238, 0.99047619, 0.94285714, 0.13333333, 0.76190476],
       [0.76190476, 0.99047619, 0.94285714, 0.13333333, 0.58095238]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 1, 0]])
Reward 0.19254615638497655, Time 5.55104826538297
-- step 12 
State: [0.99047619 0.94285714 0.6952381  0.11428571 0.76190476], Agent: agent_3, Time: 5.55104826538297
Pre transition data: {'state': [array([0.99047619, 0.94285714, 0.6952381 , 0.11428571, 0.76190476])], 'obs': [array([[0.99047619, 0.94285714, 0.6952381 , 0.11428571, 0.76190476],
       [0.94285714, 0.99047619, 0.6952381 , 0.11428571, 0.76190476],
       [0.6952381 , 0.99047619, 0.94285714, 0.11428571, 0.76190476],
       [0.11428571, 0.99047619, 0.94285714, 0.6952381 , 0.76190476],
       [0.76190476, 0.99047619, 0.94285714, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 0]])
Reward -0.000626662211843394, Time 5.613714486567309
-- step 13 
State: [0.99047619 0.21904762 0.6952381  0.11428571 0.76190476], Agent: agent_1, Time: 5.613714486567309
Pre transition data: {'state': [array([0.99047619, 0.21904762, 0.6952381 , 0.11428571, 0.76190476])], 'obs': [array([[0.99047619, 0.21904762, 0.6952381 , 0.11428571, 0.76190476],
       [0.21904762, 0.99047619, 0.6952381 , 0.11428571, 0.76190476],
       [0.6952381 , 0.99047619, 0.21904762, 0.11428571, 0.76190476],
       [0.11428571, 0.99047619, 0.21904762, 0.6952381 , 0.76190476],
       [0.76190476, 0.99047619, 0.21904762, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 1., 1., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 0]])
Reward -0.0031606052739429915, Time 5.929775013961608
-- step 14 
State: [0.99047619 0.97142857 0.6952381  0.11428571 0.2       ], Agent: agent_4, Time: 5.929775013961608
Pre transition data: {'state': [array([0.99047619, 0.97142857, 0.6952381 , 0.11428571, 0.2       ])], 'obs': [array([[0.99047619, 0.97142857, 0.6952381 , 0.11428571, 0.2       ],
       [0.97142857, 0.99047619, 0.6952381 , 0.11428571, 0.2       ],
       [0.6952381 , 0.99047619, 0.97142857, 0.11428571, 0.2       ],
       [0.11428571, 0.99047619, 0.97142857, 0.6952381 , 0.2       ],
       [0.2       , 0.99047619, 0.97142857, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 1., 1., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 2]])
Reward -0.0012214599882005128, Time 6.051921012781659
-- step 15 
State: [0.21904762 0.97142857 0.6952381  0.11428571 0.8952381 ], Agent: agent_0, Time: 6.051921012781659
Pre transition data: {'state': [array([0.21904762, 0.97142857, 0.6952381 , 0.11428571, 0.8952381 ])], 'obs': [array([[0.21904762, 0.97142857, 0.6952381 , 0.11428571, 0.8952381 ],
       [0.97142857, 0.21904762, 0.6952381 , 0.11428571, 0.8952381 ],
       [0.6952381 , 0.21904762, 0.97142857, 0.11428571, 0.8952381 ],
       [0.11428571, 0.21904762, 0.97142857, 0.6952381 , 0.8952381 ],
       [0.8952381 , 0.21904762, 0.97142857, 0.6952381 , 0.11428571]])], 'avail_actions': [array([[0., 1., 1., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 2]])
Reward -0.014148134268671253, Time 7.466734439648785
-- step 16 
State: [0.96190476 0.97142857 0.18095238 0.11428571 0.8952381 ], Agent: agent_2, Time: 7.466734439648785
Pre transition data: {'state': [array([0.96190476, 0.97142857, 0.18095238, 0.11428571, 0.8952381 ])], 'obs': [array([[0.96190476, 0.97142857, 0.18095238, 0.11428571, 0.8952381 ],
       [0.97142857, 0.96190476, 0.18095238, 0.11428571, 0.8952381 ],
       [0.18095238, 0.96190476, 0.97142857, 0.11428571, 0.8952381 ],
       [0.11428571, 0.96190476, 0.97142857, 0.18095238, 0.8952381 ],
       [0.8952381 , 0.96190476, 0.97142857, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 0., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 2]])
Reward -0.010000773443796698, Time 8.466811784028454
-- step 17 
State: [0.96190476 0.97142857 0.86666667 0.11428571 0.15238095], Agent: agent_4, Time: 8.466811784028454
Pre transition data: {'state': [array([0.96190476, 0.97142857, 0.86666667, 0.11428571, 0.15238095])], 'obs': [array([[0.96190476, 0.97142857, 0.86666667, 0.11428571, 0.15238095],
       [0.97142857, 0.96190476, 0.86666667, 0.11428571, 0.15238095],
       [0.86666667, 0.96190476, 0.97142857, 0.11428571, 0.15238095],
       [0.11428571, 0.96190476, 0.97142857, 0.86666667, 0.15238095],
       [0.15238095, 0.96190476, 0.97142857, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[3, 1, 0, 4, 1]])
Reward 0.19780240493975978, Time 8.686571290052477
-- step 18 
State: [0.96190476 0.22857143 0.86666667 0.11428571 0.75238095], Agent: agent_1, Time: 8.686571290052477
Pre transition data: {'state': [array([0.96190476, 0.22857143, 0.86666667, 0.11428571, 0.75238095])], 'obs': [array([[0.96190476, 0.22857143, 0.86666667, 0.11428571, 0.75238095],
       [0.22857143, 0.96190476, 0.86666667, 0.11428571, 0.75238095],
       [0.86666667, 0.96190476, 0.22857143, 0.11428571, 0.75238095],
       [0.11428571, 0.96190476, 0.22857143, 0.86666667, 0.75238095],
       [0.75238095, 0.96190476, 0.22857143, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[3, 4, 0, 4, 1]])
Reward 0.19959013254621383, Time 8.727558035431095
-- step 19 
State: [0.20952381 0.22857143 0.86666667 0.11428571 0.75238095], Agent: agent_0, Time: 8.727558035431095
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.75238095])], 'obs': [array([[0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.75238095],
       [0.22857143, 0.20952381, 0.86666667, 0.11428571, 0.75238095],
       [0.86666667, 0.20952381, 0.22857143, 0.11428571, 0.75238095],
       [0.11428571, 0.20952381, 0.22857143, 0.86666667, 0.75238095],
       [0.75238095, 0.20952381, 0.22857143, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0.]])]}
Actions: tensor([[4, 4, 0, 4, 1]])
Reward -0.020574283817319988, Time 10.784986417163093
-- step 20 
State: [0.20952381 0.22857143 0.86666667 0.11428571 0.16190476], Agent: agent_4, Time: 10.784986417163093
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.16190476])], 'obs': [array([[0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.16190476],
       [0.22857143, 0.20952381, 0.86666667, 0.11428571, 0.16190476],
       [0.86666667, 0.20952381, 0.22857143, 0.11428571, 0.16190476],
       [0.11428571, 0.20952381, 0.22857143, 0.86666667, 0.16190476],
       [0.16190476, 0.20952381, 0.22857143, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.]])]}
Actions: tensor([[4, 4, 0, 4, 1]])
Reward 0.18183080895158454, Time 12.60190552200464
-- step 21 
State: [0.20952381 0.22857143 0.86666667 0.11428571 0.17142857], Agent: agent_4, Time: 12.60190552200464
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.86666667, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.86666667, 0.11428571, 0.17142857],
       [0.86666667, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.86666667, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.86666667, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.05200352467112824, Time 17.802257989117464
-- step 22 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 17.802257989117464
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02068478660176808, Time 19.870736649294273
-- step 23 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 19.870736649294273
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.039721120480026004, Time 23.842848697296873
-- step 24 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 23.842848697296873
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.0267641452773195, Time 26.519263225028823
-- step 25 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 26.519263225028823
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.023062593263366935, Time 28.825522551365516
-- step 26 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 28.825522551365516
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02344835211985071, Time 31.170357763350587
-- step 27 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 31.170357763350587
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.020173837425248777, Time 33.187741505875465
-- step 28 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 33.187741505875465
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.020214494837746316, Time 35.2091909896501
-- step 29 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 35.2091909896501
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029258775776009785, Time 38.135068567251075
-- step 30 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 38.135068567251075
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.023140677673700195, Time 40.449136334621095
-- step 31 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 40.449136334621095
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03127616691567965, Time 43.57675302618906
-- step 32 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 43.57675302618906
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.029173054124757555, Time 46.494058438664815
-- step 33 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 46.494058438664815
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029233684203765976, Time 49.41742685904141
-- step 34 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 49.41742685904141
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02205680070295628, Time 51.62310692933704
-- step 35 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 51.62310692933704
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.021836838454712577, Time 53.8067907748083
-- step 36 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 53.8067907748083
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.021936473447403914, Time 56.00043811954869
-- step 37 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 56.00043811954869
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.01598277324091448, Time 57.59871544364014
-- step 38 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 57.59871544364014
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02544409987813843, Time 60.14312543145398
-- step 39 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 60.14312543145398
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.025220702774495438, Time 62.665195708903525
-- step 40 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 62.665195708903525
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.019582688128557492, Time 64.62346452175927
-- step 41 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 64.62346452175927
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04226995497696862, Time 68.85046001945614
-- step 42 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 68.85046001945614
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03360075997809915, Time 72.21053601726605
-- step 43 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 72.21053601726605
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.026306657081349556, Time 74.841201725401
-- step 44 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 74.841201725401
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02691686078257973, Time 77.53288780365898
-- step 45 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 77.53288780365898
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.025753131272952173, Time 80.1082009309542
-- step 46 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 80.1082009309542
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02124042658883383, Time 82.23224358983758
-- step 47 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 82.23224358983758
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.056453271193319665, Time 87.87757070916955
-- step 48 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 87.87757070916955
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.025969053706970016, Time 90.47447607986655
-- step 49 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 90.47447607986655
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.013921780276559303, Time 91.86665410752248
-- step 50 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 91.86665410752248
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02766698114175938, Time 94.63335222169842
-- step 51 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 94.63335222169842
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.023060331979378786, Time 96.9393854196363
-- step 52 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 96.9393854196363
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04278507213128748, Time 101.21789263276504
-- step 53 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 101.21789263276504
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03503025156062179, Time 104.72091778882722
-- step 54 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 104.72091778882722
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.021913497971500533, Time 106.91226758597728
-- step 55 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 106.91226758597728
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.013587645763611534, Time 108.27103216233843
-- step 56 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 108.27103216233843
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.031866015460806384, Time 111.45763370841907
-- step 57 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 111.45763370841907
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.025154941000882333, Time 113.9731278085073
-- step 58 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 113.9731278085073
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.0197975070608679, Time 115.95287851459409
-- step 59 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 115.95287851459409
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02868668277770482, Time 118.82154679236457
-- step 60 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 118.82154679236457
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.017549667553266913, Time 120.57651354769126
-- step 61 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 120.57651354769126
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.01687388232017227, Time 122.26390177970849
-- step 62 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 122.26390177970849
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.025254520878932426, Time 124.78935386760173
-- step 63 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 124.78935386760173
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029498792315115593, Time 127.73923309911329
-- step 64 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 127.73923309911329
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.018142932363507072, Time 129.553526335464
-- step 65 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 129.553526335464
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03280422906733605, Time 132.8339492421976
-- step 66 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 132.8339492421976
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.021414051739359365, Time 134.97535441613354
-- step 67 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 134.97535441613354
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02962502160947679, Time 137.93785657708122
-- step 68 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 137.93785657708122
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.009532758162881691, Time 138.8911323933694
-- step 69 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 138.8911323933694
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.024021078022071832, Time 141.29324019557657
-- step 70 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 141.29324019557657
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.029814627593217152, Time 144.2747029548983
-- step 71 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 144.2747029548983
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022425719570042305, Time 146.51727491190252
-- step 72 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 146.51727491190252
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.025985181195104304, Time 149.11579303141295
-- step 73 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 149.11579303141295
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.026033601429672613, Time 151.7191531743802
-- step 74 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 151.7191531743802
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.022437190653683672, Time 153.96287223974858
-- step 75 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 153.96287223974858
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03552745517810053, Time 157.51561775755863
-- step 76 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 157.51561775755863
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027291374932872828, Time 160.2447552508459
-- step 77 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 160.2447552508459
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.041486496768772835, Time 164.3934049277232
-- step 78 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 164.3934049277232
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.011480621524284515, Time 165.54146708015165
-- step 79 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 165.54146708015165
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028213493491488748, Time 168.36281642930052
-- step 80 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 168.36281642930052
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.019357838054551168, Time 170.29860023475564
-- step 81 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 170.29860023475564
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.025742139353496327, Time 172.87281417010527
-- step 82 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 172.87281417010527
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.040728094890868934, Time 176.94562365919217
-- step 83 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 176.94562365919217
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.030526014223081575, Time 179.99822508150032
-- step 84 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 179.99822508150032
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02112567647374476, Time 182.1107927288748
-- step 85 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 182.1107927288748
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03632481968819917, Time 185.74327469769472
-- step 86 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 185.74327469769472
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.05840913223253267, Time 191.58418792094798
-- step 87 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 191.58418792094798
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03851144269904438, Time 195.43533219085242
-- step 88 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 195.43533219085242
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.028119692130845805, Time 198.247301403937
-- step 89 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 198.247301403937
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03274514784859832, Time 201.52181618879683
-- step 90 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 201.52181618879683
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03932946024362906, Time 205.45476221315974
-- step 91 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 205.45476221315974
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04200376644143631, Time 209.65513885730337
-- step 92 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 209.65513885730337
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03586123630296214, Time 213.24126248759958
-- step 93 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 213.24126248759958
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02037765126232898, Time 215.27902761383248
-- step 94 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 215.27902761383248
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03351229969037945, Time 218.63025758287043
-- step 95 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 218.63025758287043
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.028346636922161394, Time 221.46492127508657
-- step 96 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 221.46492127508657
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.034893095410498634, Time 224.95423081613643
-- step 97 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 224.95423081613643
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022425687415880306, Time 227.19679955772446
-- step 98 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 227.19679955772446
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03004794122588038, Time 230.2015936803125
-- step 99 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 230.2015936803125
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.022991672544623042, Time 232.5007609347748
-- step 100 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 232.5007609347748
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.018558296096157677, Time 234.35659054439057
-- step 101 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 234.35659054439057
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02882500654648709, Time 237.23909119903928
-- step 102 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 237.23909119903928
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.04593022392648294, Time 241.83211359168757
-- step 103 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 241.83211359168757
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.03688976002531575, Time 245.52108959421915
-- step 104 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 245.52108959421915
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.020102673009920125, Time 247.53135689521116
-- step 105 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 247.53135689521116
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.023900158392508218, Time 249.92137273446198
-- step 106 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 249.92137273446198
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.03497472084110427, Time 253.4188448185724
-- step 107 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 253.4188448185724
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.021720579121269453, Time 255.59090273069936
-- step 108 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 255.59090273069936
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.030238766510061906, Time 258.61477938170555
-- step 109 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 258.61477938170555
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04258900561207895, Time 262.87367994291344
-- step 110 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 262.87367994291344
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.023031035969648315, Time 265.1767835398783
-- step 111 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 265.1767835398783
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.029223649758941973, Time 268.09914851577247
-- step 112 
State: [0.20952381 0.22857143 0.22857143 0.11428571 0.17142857], Agent: agent_2, Time: 268.09914851577247
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.22857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.22857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02311155240647679, Time 270.41030375642015
-- step 113 
State: [0.20952381 0.22857143 0.18095238 0.11428571 0.17142857], Agent: agent_2, Time: 270.41030375642015
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.18095238, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.18095238, 0.11428571, 0.17142857],
       [0.18095238, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.18095238, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.18095238, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.038990730366318754, Time 274.309376793052
-- step 114 
State: [0.20952381 0.22857143 0.13333333 0.11428571 0.17142857], Agent: agent_2, Time: 274.309376793052
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.13333333, 0.11428571, 0.17142857],
       [0.13333333, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.13333333, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.01633663690768344, Time 275.94304048382037
-- step 115 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 275.94304048382037
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.03542528666279566, Time 279.48556915009993
-- step 116 
State: [0.20952381 0.22857143 0.07619048 0.11428571 0.17142857], Agent: agent_2, Time: 279.48556915009993
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.07619048, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.07619048, 0.11428571, 0.17142857],
       [0.07619048, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.07619048, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.07619048, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.031879515186532786, Time 282.6735206687532
-- step 117 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 282.6735206687532
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.020597831955860783, Time 284.7333038643393
-- step 118 
State: [0.20952381 0.22857143 0.13333333 0.11428571 0.17142857], Agent: agent_2, Time: 284.7333038643393
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.13333333, 0.11428571, 0.17142857],
       [0.13333333, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.13333333, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027976723945739083, Time 287.5309762589132
-- step 119 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 287.5309762589132
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02159312787328247, Time 289.69028904624145
-- step 120 
State: [0.20952381 0.22857143 0.13333333 0.11428571 0.17142857], Agent: agent_2, Time: 289.69028904624145
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.13333333, 0.11428571, 0.17142857],
       [0.13333333, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.13333333, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.032033152203105715, Time 292.893604266552
-- step 121 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 292.893604266552
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.0465145319755743, Time 297.54505746410945
-- step 122 
State: [0.20952381 0.22857143 0.13333333 0.11428571 0.17142857], Agent: agent_2, Time: 297.54505746410945
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.13333333, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.13333333, 0.11428571, 0.17142857],
       [0.13333333, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.13333333, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.13333333, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.023872869847844525, Time 299.9323444488939
-- step 123 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 299.9323444488939
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.023128256305351442, Time 302.24517007942904
-- step 124 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 302.24517007942904
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.017975145281287724, Time 304.0426846075578
-- step 125 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 304.0426846075578
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.028754287672319946, Time 306.9181133747898
-- step 126 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 306.9181133747898
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.031594020622548555, Time 310.07751543704467
-- step 127 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 310.07751543704467
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.028784937373127945, Time 312.95600917435746
-- step 128 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 312.95600917435746
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.027622353439982136, Time 315.7182445183557
-- step 129 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 315.7182445183557
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.031410280365273595, Time 318.85927255488303
-- step 130 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 318.85927255488303
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02163711563819845, Time 321.0229841187029
-- step 131 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 321.0229841187029
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.016007046768688155, Time 322.6236887955717
-- step 132 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 322.6236887955717
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.018860735406252615, Time 324.50976233619696
-- step 133 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 324.50976233619696
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.026631711111801907, Time 327.17293344737715
-- step 134 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 327.17293344737715
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.052217662516595736, Time 332.3946996990367
-- step 135 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 332.3946996990367
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.026482270417692463, Time 335.04292674080597
-- step 136 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 335.04292674080597
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.04923769259960977, Time 339.96669600076694
-- step 137 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 339.96669600076694
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.03617437303288853, Time 343.5841333040558
-- step 138 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 343.5841333040558
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04145072710247234, Time 347.72920601430303
-- step 139 
State: [0.20952381 0.22857143 0.08571429 0.11428571 0.17142857], Agent: agent_2, Time: 347.72920601430303
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.08571429, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.08571429, 0.11428571, 0.17142857],
       [0.08571429, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.08571429, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.08571429, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 1., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.02164844153950696, Time 349.8940501682537
-- step 140 
State: [0.20952381 0.22857143 0.03809524 0.11428571 0.17142857], Agent: agent_2, Time: 349.8940501682537
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.03809524, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.03809524, 0.11428571, 0.17142857],
       [0.03809524, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.03809524, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.03809524, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.01166801307519563, Time 351.0608514757733
-- step 141 
State: [0.20952381 0.22857143 0.02857143 0.11428571 0.17142857], Agent: agent_2, Time: 351.0608514757733
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.02857143, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.02857143, 0.11428571, 0.17142857],
       [0.02857143, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.02857143, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.02857143, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.030285119477217678, Time 354.08936342349506
-- step 142 
State: [0.20952381 0.22857143 0.01904762 0.11428571 0.17142857], Agent: agent_2, Time: 354.08936342349506
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.01904762, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.01904762, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.01904762, 0.11428571, 0.17142857],
       [0.01904762, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.01904762, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.01904762, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.032609799927635096, Time 357.35034341625857
-- step 143 
State: [0.20952381 0.22857143 0.00952381 0.11428571 0.17142857], Agent: agent_2, Time: 357.35034341625857
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.00952381, 0.11428571, 0.17142857],
       [0.00952381, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.00952381, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.00952381, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.02009163843522515, Time 359.3595072597811
-- step 144 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 359.3595072597811
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.04278944434320522, Time 363.6384516941016
-- step 145 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 363.6384516941016
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.028342002257574564, Time 366.47265191985906
-- step 146 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 366.47265191985906
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02984408636663204, Time 369.45706055652226
-- step 147 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 369.45706055652226
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 2, 4, 4]])
Reward -0.027854849058636545, Time 372.2425454623859
-- step 148 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 372.2425454623859
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 1, 4, 4]])
Reward -0.03142624637760605, Time 375.3851701001465
-- step 149 
State: [0.20952381 0.22857143 0.00952381 0.11428571 0.17142857], Agent: agent_2, Time: 375.3851701001465
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.00952381, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.00952381, 0.11428571, 0.17142857],
       [0.00952381, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.00952381, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.00952381, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 1., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 3, 4, 4]])
Reward -0.018890924570414427, Time 377.27426255718797
-- step 150 
State: [0.20952381 0.22857143 0.         0.11428571 0.17142857], Agent: agent_2, Time: 377.27426255718797
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.        , 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.        , 0.11428571, 0.17142857],
       [0.        , 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.        , 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.        , 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward -0.02518497200335048, Time 379.792759757523
-- step 151 
State: [0.20952381 0.22857143 0.04761905 0.11428571 0.17142857], Agent: agent_2, Time: 379.792759757523
Pre transition data: {'state': [array([0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857])], 'obs': [array([[0.20952381, 0.22857143, 0.04761905, 0.11428571, 0.17142857],
       [0.22857143, 0.20952381, 0.04761905, 0.11428571, 0.17142857],
       [0.04761905, 0.20952381, 0.22857143, 0.11428571, 0.17142857],
       [0.11428571, 0.20952381, 0.22857143, 0.04761905, 0.17142857],
       [0.17142857, 0.20952381, 0.22857143, 0.04761905, 0.11428571]])], 'avail_actions': [array([[0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.],
       [1., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 1.]])]}
Actions: tensor([[4, 4, 0, 4, 4]])
Reward 8.220008754530365, Time 383.9247989622976
events [('congestion', 0.0, 'agent_0', 'e_(3, 4)_(4, 4)', 0, 0), ('congestion', 0.0, 'agent_1', 'e_(4, 1)_(4, 2)', 0, 0), ('congestion', 0.0, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('congestion', 0.0, 'agent_3', 'e_(1, 1)_(2, 1)', 0, 0), ('congestion', 0.0, 'agent_4', 'e_(2, 1)_(3, 1)', 0, 0), ('location', 2.2530508934413636, 'agent_4', '(3, 1)'), ('congestion', 2.2530508934413636, 'agent_4', 'e_(3, 1)_(4, 1)', 0, 0), ('location', 2.624563399710629, 'agent_1', '(4, 2)'), ('congestion', 2.624563399710629, 'agent_1', 'e_(4, 2)_(4, 3)', 0, 0), ('location', 2.9478884987563827, 'agent_0', '(4, 4)'), ('congestion', 2.9478884987563827, 'agent_0', 'e_(4, 4)_(4, 3)', 1, 1), ('location', 2.985941017487544, 'agent_2', '(1, 4)'), ('congestion', 2.9859410174875443, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('location', 3.7280555797899333, 'agent_3', '(2, 1)'), ('congestion', 3.7280555797899337, 'agent_3', 'e_(2, 1)_(2, 2)', 0, 0), ('location', 4.805663903880623, 'agent_2', '(2, 4)'), ('congestion', 4.805663903880623, 'agent_2', 'e_(2, 4)_(3, 4)', 0, 0), ('location', 5.55104826538297, 'agent_3', '(2, 2)'), ('location', 5.55104826538297, 'agent_3', 'Agent reached goal'), ('location', 5.613714486567309, 'agent_1', '(4, 3)'), ('congestion', 5.613714486567309, 'agent_1', 'e_(4, 3)_(4, 4)', 0, 0), ('location', 5.929775013961609, 'agent_4', '(4, 1)'), ('congestion', 5.929775013961608, 'agent_4', 'e_(4, 1)_(3, 1)', 0, 0), ('location', 6.051921012781659, 'agent_0', '(4, 3)'), ('congestion', 6.051921012781659, 'agent_0', 'e_(4, 3)_(4, 2)', 0, 0), ('location', 7.466734439648785, 'agent_2', '(3, 4)'), ('congestion', 7.466734439648785, 'agent_2', 'e_(3, 4)_(4, 4)', 1, 1), ('location', 8.466811784028454, 'agent_4', '(3, 1)'), ('congestion', 8.466811784028454, 'agent_4', 'e_(3, 1)_(3, 2)', 0, 0), ('location', 8.686571290052475, 'agent_1', '(4, 4)'), ('location', 8.686571290052477, 'agent_1', 'Agent reached goal'), ('location', 8.727558035431095, 'agent_0', '(4, 2)'), ('location', 8.727558035431095, 'agent_0', 'Agent reached goal'), ('location', 10.784986417163092, 'agent_4', '(3, 2)'), ('congestion', 10.784986417163093, 'agent_4', 'e_(3, 2)_(3, 3)', 0, 0), ('location', 12.60190552200464, 'agent_4', '(3, 3)'), ('location', 12.60190552200464, 'agent_4', 'Agent reached goal'), ('location', 17.802257989117468, 'agent_2', '(4, 4)'), ('congestion', 17.802257989117464, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 19.870736649294276, 'agent_2', '(3, 4)'), ('congestion', 19.870736649294273, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 23.84284869729687, 'agent_2', '(4, 4)'), ('congestion', 23.842848697296873, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 26.519263225028823, 'agent_2', '(3, 4)'), ('congestion', 26.519263225028823, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 28.825522551365516, 'agent_2', '(4, 4)'), ('congestion', 28.825522551365516, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 31.170357763350587, 'agent_2', '(3, 4)'), ('congestion', 31.170357763350587, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 33.187741505875465, 'agent_2', '(4, 4)'), ('congestion', 33.187741505875465, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 35.2091909896501, 'agent_2', '(3, 4)'), ('congestion', 35.2091909896501, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 38.135068567251075, 'agent_2', '(4, 4)'), ('congestion', 38.135068567251075, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 40.4491363346211, 'agent_2', '(3, 4)'), ('congestion', 40.449136334621095, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 43.57675302618906, 'agent_2', '(4, 4)'), ('congestion', 43.57675302618906, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 46.49405843866481, 'agent_2', '(3, 4)'), ('congestion', 46.494058438664815, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 49.41742685904141, 'agent_2', '(4, 4)'), ('congestion', 49.41742685904141, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 51.62310692933704, 'agent_2', '(3, 4)'), ('congestion', 51.62310692933704, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 53.8067907748083, 'agent_2', '(4, 4)'), ('congestion', 53.8067907748083, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 56.00043811954868, 'agent_2', '(3, 4)'), ('congestion', 56.00043811954869, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 57.59871544364014, 'agent_2', '(4, 4)'), ('congestion', 57.59871544364014, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 60.14312543145399, 'agent_2', '(3, 4)'), ('congestion', 60.14312543145398, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 62.66519570890352, 'agent_2', '(4, 4)'), ('congestion', 62.665195708903525, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 64.62346452175927, 'agent_2', '(3, 4)'), ('congestion', 64.62346452175927, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 68.85046001945614, 'agent_2', '(4, 4)'), ('congestion', 68.85046001945614, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 72.21053601726605, 'agent_2', '(3, 4)'), ('congestion', 72.21053601726605, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 74.841201725401, 'agent_2', '(4, 4)'), ('congestion', 74.841201725401, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 77.53288780365898, 'agent_2', '(3, 4)'), ('congestion', 77.53288780365898, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 80.1082009309542, 'agent_2', '(4, 4)'), ('congestion', 80.1082009309542, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 82.23224358983758, 'agent_2', '(3, 4)'), ('congestion', 82.23224358983758, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 87.87757070916955, 'agent_2', '(4, 4)'), ('congestion', 87.87757070916955, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 90.47447607986655, 'agent_2', '(3, 4)'), ('congestion', 90.47447607986655, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 91.86665410752248, 'agent_2', '(4, 4)'), ('congestion', 91.86665410752248, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 94.63335222169842, 'agent_2', '(3, 4)'), ('congestion', 94.63335222169842, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 96.9393854196363, 'agent_2', '(4, 4)'), ('congestion', 96.9393854196363, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 101.21789263276504, 'agent_2', '(3, 4)'), ('congestion', 101.21789263276504, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 104.72091778882722, 'agent_2', '(4, 4)'), ('congestion', 104.72091778882722, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 106.91226758597728, 'agent_2', '(3, 4)'), ('congestion', 106.91226758597728, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 108.27103216233844, 'agent_2', '(4, 4)'), ('congestion', 108.27103216233843, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 111.45763370841907, 'agent_2', '(3, 4)'), ('congestion', 111.45763370841907, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 113.9731278085073, 'agent_2', '(4, 4)'), ('congestion', 113.9731278085073, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 115.95287851459409, 'agent_2', '(3, 4)'), ('congestion', 115.95287851459409, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 118.82154679236456, 'agent_2', '(4, 4)'), ('congestion', 118.82154679236457, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 120.57651354769126, 'agent_2', '(3, 4)'), ('congestion', 120.57651354769126, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 122.26390177970849, 'agent_2', '(4, 4)'), ('congestion', 122.26390177970849, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 124.78935386760173, 'agent_2', '(3, 4)'), ('congestion', 124.78935386760173, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 127.7392330991133, 'agent_2', '(4, 4)'), ('congestion', 127.73923309911329, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 129.553526335464, 'agent_2', '(3, 4)'), ('congestion', 129.553526335464, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 132.8339492421976, 'agent_2', '(4, 4)'), ('congestion', 132.8339492421976, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 134.97535441613354, 'agent_2', '(3, 4)'), ('congestion', 134.97535441613354, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 137.93785657708122, 'agent_2', '(4, 4)'), ('congestion', 137.93785657708122, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 138.8911323933694, 'agent_2', '(3, 4)'), ('congestion', 138.8911323933694, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 141.29324019557657, 'agent_2', '(4, 4)'), ('congestion', 141.29324019557657, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 144.2747029548983, 'agent_2', '(3, 4)'), ('congestion', 144.2747029548983, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 146.51727491190255, 'agent_2', '(4, 4)'), ('congestion', 146.51727491190252, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 149.11579303141295, 'agent_2', '(3, 4)'), ('congestion', 149.11579303141295, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 151.7191531743802, 'agent_2', '(4, 4)'), ('congestion', 151.7191531743802, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 153.96287223974858, 'agent_2', '(3, 4)'), ('congestion', 153.96287223974858, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 157.51561775755863, 'agent_2', '(4, 4)'), ('congestion', 157.51561775755863, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 160.2447552508459, 'agent_2', '(3, 4)'), ('congestion', 160.2447552508459, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 164.3934049277232, 'agent_2', '(4, 4)'), ('congestion', 164.3934049277232, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 165.54146708015165, 'agent_2', '(3, 4)'), ('congestion', 165.54146708015165, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 168.36281642930052, 'agent_2', '(4, 4)'), ('congestion', 168.36281642930052, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 170.29860023475564, 'agent_2', '(3, 4)'), ('congestion', 170.29860023475564, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 172.87281417010527, 'agent_2', '(4, 4)'), ('congestion', 172.87281417010527, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 176.94562365919217, 'agent_2', '(3, 4)'), ('congestion', 176.94562365919217, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 179.99822508150032, 'agent_2', '(4, 4)'), ('congestion', 179.99822508150032, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 182.1107927288748, 'agent_2', '(3, 4)'), ('congestion', 182.1107927288748, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 185.74327469769472, 'agent_2', '(4, 4)'), ('congestion', 185.74327469769472, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 191.58418792094798, 'agent_2', '(3, 4)'), ('congestion', 191.58418792094798, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 195.43533219085242, 'agent_2', '(4, 4)'), ('congestion', 195.43533219085242, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 198.247301403937, 'agent_2', '(3, 4)'), ('congestion', 198.247301403937, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 201.52181618879683, 'agent_2', '(4, 4)'), ('congestion', 201.52181618879683, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 205.45476221315974, 'agent_2', '(3, 4)'), ('congestion', 205.45476221315974, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 209.65513885730337, 'agent_2', '(4, 4)'), ('congestion', 209.65513885730337, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 213.24126248759958, 'agent_2', '(3, 4)'), ('congestion', 213.24126248759958, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 215.27902761383248, 'agent_2', '(4, 4)'), ('congestion', 215.27902761383248, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 218.63025758287043, 'agent_2', '(3, 4)'), ('congestion', 218.63025758287043, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 221.46492127508654, 'agent_2', '(4, 4)'), ('congestion', 221.46492127508657, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 224.95423081613643, 'agent_2', '(3, 4)'), ('congestion', 224.95423081613643, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 227.19679955772446, 'agent_2', '(4, 4)'), ('congestion', 227.19679955772446, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 230.2015936803125, 'agent_2', '(3, 4)'), ('congestion', 230.2015936803125, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 232.5007609347748, 'agent_2', '(4, 4)'), ('congestion', 232.5007609347748, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 234.35659054439057, 'agent_2', '(3, 4)'), ('congestion', 234.35659054439057, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 237.23909119903928, 'agent_2', '(4, 4)'), ('congestion', 237.23909119903928, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 241.83211359168757, 'agent_2', '(3, 4)'), ('congestion', 241.83211359168757, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 245.52108959421915, 'agent_2', '(4, 4)'), ('congestion', 245.52108959421915, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 247.53135689521116, 'agent_2', '(3, 4)'), ('congestion', 247.53135689521116, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 249.92137273446198, 'agent_2', '(4, 4)'), ('congestion', 249.92137273446198, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 253.4188448185724, 'agent_2', '(3, 4)'), ('congestion', 253.4188448185724, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 255.59090273069936, 'agent_2', '(4, 4)'), ('congestion', 255.59090273069936, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 258.61477938170555, 'agent_2', '(3, 4)'), ('congestion', 258.61477938170555, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 262.87367994291344, 'agent_2', '(4, 4)'), ('congestion', 262.87367994291344, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 265.1767835398783, 'agent_2', '(3, 4)'), ('congestion', 265.1767835398783, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('location', 268.09914851577247, 'agent_2', '(4, 4)'), ('congestion', 268.09914851577247, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('location', 270.41030375642015, 'agent_2', '(3, 4)'), ('congestion', 270.41030375642015, 'agent_2', 'e_(3, 4)_(2, 4)', 0, 0), ('location', 274.309376793052, 'agent_2', '(2, 4)'), ('congestion', 274.309376793052, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('location', 275.94304048382037, 'agent_2', '(1, 4)'), ('congestion', 275.94304048382037, 'agent_2', 'e_(1, 4)_(1, 3)', 0, 0), ('location', 279.48556915009993, 'agent_2', '(1, 3)'), ('congestion', 279.48556915009993, 'agent_2', 'e_(1, 3)_(1, 4)', 0, 0), ('location', 282.67352066875327, 'agent_2', '(1, 4)'), ('congestion', 282.6735206687532, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('location', 284.73330386433935, 'agent_2', '(2, 4)'), ('congestion', 284.7333038643393, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('location', 287.5309762589132, 'agent_2', '(1, 4)'), ('congestion', 287.5309762589132, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('location', 289.69028904624145, 'agent_2', '(2, 4)'), ('congestion', 289.69028904624145, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('location', 292.893604266552, 'agent_2', '(1, 4)'), ('congestion', 292.893604266552, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('location', 297.54505746410945, 'agent_2', '(2, 4)'), ('congestion', 297.54505746410945, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('location', 299.9323444488939, 'agent_2', '(1, 4)'), ('congestion', 299.9323444488939, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 302.245170079429, 'agent_2', '(0, 4)'), ('congestion', 302.24517007942904, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 304.0426846075578, 'agent_2', '(0, 3)'), ('congestion', 304.0426846075578, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('location', 306.9181133747898, 'agent_2', '(0, 4)'), ('congestion', 306.9181133747898, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 310.07751543704467, 'agent_2', '(1, 4)'), ('congestion', 310.07751543704467, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 312.95600917435746, 'agent_2', '(0, 4)'), ('congestion', 312.95600917435746, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 315.7182445183557, 'agent_2', '(1, 4)'), ('congestion', 315.7182445183557, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 318.85927255488303, 'agent_2', '(0, 4)'), ('congestion', 318.85927255488303, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 321.02298411870294, 'agent_2', '(1, 4)'), ('congestion', 321.0229841187029, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 322.62368879557164, 'agent_2', '(0, 4)'), ('congestion', 322.6236887955717, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 324.50976233619696, 'agent_2', '(1, 4)'), ('congestion', 324.50976233619696, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 327.17293344737715, 'agent_2', '(0, 4)'), ('congestion', 327.17293344737715, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 332.3946996990368, 'agent_2', '(1, 4)'), ('congestion', 332.3946996990367, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 335.04292674080597, 'agent_2', '(0, 4)'), ('congestion', 335.04292674080597, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 339.96669600076694, 'agent_2', '(0, 3)'), ('congestion', 339.96669600076694, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('location', 343.5841333040558, 'agent_2', '(0, 4)'), ('congestion', 343.5841333040558, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('location', 347.72920601430303, 'agent_2', '(1, 4)'), ('congestion', 347.72920601430303, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('location', 349.8940501682537, 'agent_2', '(0, 4)'), ('congestion', 349.8940501682537, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('location', 351.06085147577323, 'agent_2', '(0, 3)'), ('congestion', 351.0608514757733, 'agent_2', 'e_(0, 3)_(0, 2)', 0, 0), ('location', 354.08936342349506, 'agent_2', '(0, 2)'), ('congestion', 354.08936342349506, 'agent_2', 'e_(0, 2)_(0, 1)', 0, 0), ('location', 357.35034341625857, 'agent_2', '(0, 1)'), ('congestion', 357.35034341625857, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('location', 359.3595072597811, 'agent_2', '(0, 0)'), ('congestion', 359.3595072597811, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 363.6384516941016, 'agent_2', '(1, 0)'), ('congestion', 363.6384516941016, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('location', 366.47265191985906, 'agent_2', '(0, 0)'), ('congestion', 366.47265191985906, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 369.4570605565223, 'agent_2', '(1, 0)'), ('congestion', 369.45706055652226, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('location', 372.2425454623859, 'agent_2', '(0, 0)'), ('congestion', 372.2425454623859, 'agent_2', 'e_(0, 0)_(0, 1)', 0, 0), ('location', 375.38517010014647, 'agent_2', '(0, 1)'), ('congestion', 375.3851701001465, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('location', 377.2742625571879, 'agent_2', '(0, 0)'), ('congestion', 377.27426255718797, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('location', 379.792759757523, 'agent_2', '(1, 0)'), ('congestion', 379.792759757523, 'agent_2', 'e_(1, 0)_(2, 0)', 0, 0), ('location', 383.9247989622976, 'agent_2', '(2, 0)'), ('location', 383.9247989622976, 'agent_2', 'Agent reached goal')]
len 299
aevents {'agent_0': [('congestion', 0.0, 'agent_0', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 2.9478884987563827), ('congestion', 2.9478884987563827, 'agent_0', 'e_(4, 4)_(4, 3)', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9490>, 6.051921012781659), ('congestion', 6.051921012781659, 'agent_0', 'e_(4, 3)_(4, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9390>, 8.727558035431095)], 'agent_1': [('congestion', 0.0, 'agent_1', 'e_(4, 1)_(4, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9390>, 2.624563399710629), ('congestion', 2.624563399710629, 'agent_1', 'e_(4, 2)_(4, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9490>, 5.613714486567309), ('congestion', 5.613714486567309, 'agent_1', 'e_(4, 3)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 8.686571290052475)], 'agent_2': [('congestion', 0.0, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 2.985941017487544), ('congestion', 2.9859410174875443, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cfb50>, 4.805663903880623), ('congestion', 4.805663903880623, 'agent_2', 'e_(2, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 7.466734439648785), ('congestion', 7.466734439648785, 'agent_2', 'e_(3, 4)_(4, 4)', 1, 1), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 17.802257989117468), ('congestion', 17.802257989117464, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 19.870736649294276), ('congestion', 19.870736649294273, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 23.84284869729687), ('congestion', 23.842848697296873, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 26.519263225028823), ('congestion', 26.519263225028823, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 28.825522551365516), ('congestion', 28.825522551365516, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 31.170357763350587), ('congestion', 31.170357763350587, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 33.187741505875465), ('congestion', 33.187741505875465, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 35.2091909896501), ('congestion', 35.2091909896501, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 38.135068567251075), ('congestion', 38.135068567251075, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 40.4491363346211), ('congestion', 40.449136334621095, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 43.57675302618906), ('congestion', 43.57675302618906, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 46.49405843866481), ('congestion', 46.494058438664815, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 49.41742685904141), ('congestion', 49.41742685904141, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 51.62310692933704), ('congestion', 51.62310692933704, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 53.8067907748083), ('congestion', 53.8067907748083, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 56.00043811954868), ('congestion', 56.00043811954869, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 57.59871544364014), ('congestion', 57.59871544364014, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 60.14312543145399), ('congestion', 60.14312543145398, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 62.66519570890352), ('congestion', 62.665195708903525, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 64.62346452175927), ('congestion', 64.62346452175927, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 68.85046001945614), ('congestion', 68.85046001945614, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 72.21053601726605), ('congestion', 72.21053601726605, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 74.841201725401), ('congestion', 74.841201725401, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 77.53288780365898), ('congestion', 77.53288780365898, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 80.1082009309542), ('congestion', 80.1082009309542, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 82.23224358983758), ('congestion', 82.23224358983758, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 87.87757070916955), ('congestion', 87.87757070916955, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 90.47447607986655), ('congestion', 90.47447607986655, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 91.86665410752248), ('congestion', 91.86665410752248, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 94.63335222169842), ('congestion', 94.63335222169842, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 96.9393854196363), ('congestion', 96.9393854196363, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 101.21789263276504), ('congestion', 101.21789263276504, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 104.72091778882722), ('congestion', 104.72091778882722, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 106.91226758597728), ('congestion', 106.91226758597728, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 108.27103216233844), ('congestion', 108.27103216233843, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 111.45763370841907), ('congestion', 111.45763370841907, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 113.9731278085073), ('congestion', 113.9731278085073, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 115.95287851459409), ('congestion', 115.95287851459409, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 118.82154679236456), ('congestion', 118.82154679236457, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 120.57651354769126), ('congestion', 120.57651354769126, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 122.26390177970849), ('congestion', 122.26390177970849, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 124.78935386760173), ('congestion', 124.78935386760173, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 127.7392330991133), ('congestion', 127.73923309911329, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 129.553526335464), ('congestion', 129.553526335464, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 132.8339492421976), ('congestion', 132.8339492421976, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 134.97535441613354), ('congestion', 134.97535441613354, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 137.93785657708122), ('congestion', 137.93785657708122, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 138.8911323933694), ('congestion', 138.8911323933694, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 141.29324019557657), ('congestion', 141.29324019557657, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 144.2747029548983), ('congestion', 144.2747029548983, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 146.51727491190255), ('congestion', 146.51727491190252, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 149.11579303141295), ('congestion', 149.11579303141295, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 151.7191531743802), ('congestion', 151.7191531743802, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 153.96287223974858), ('congestion', 153.96287223974858, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 157.51561775755863), ('congestion', 157.51561775755863, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 160.2447552508459), ('congestion', 160.2447552508459, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 164.3934049277232), ('congestion', 164.3934049277232, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 165.54146708015165), ('congestion', 165.54146708015165, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 168.36281642930052), ('congestion', 168.36281642930052, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 170.29860023475564), ('congestion', 170.29860023475564, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 172.87281417010527), ('congestion', 172.87281417010527, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 176.94562365919217), ('congestion', 176.94562365919217, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 179.99822508150032), ('congestion', 179.99822508150032, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 182.1107927288748), ('congestion', 182.1107927288748, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 185.74327469769472), ('congestion', 185.74327469769472, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 191.58418792094798), ('congestion', 191.58418792094798, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 195.43533219085242), ('congestion', 195.43533219085242, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 198.247301403937), ('congestion', 198.247301403937, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 201.52181618879683), ('congestion', 201.52181618879683, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 205.45476221315974), ('congestion', 205.45476221315974, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 209.65513885730337), ('congestion', 209.65513885730337, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 213.24126248759958), ('congestion', 213.24126248759958, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 215.27902761383248), ('congestion', 215.27902761383248, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 218.63025758287043), ('congestion', 218.63025758287043, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 221.46492127508654), ('congestion', 221.46492127508657, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 224.95423081613643), ('congestion', 224.95423081613643, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 227.19679955772446), ('congestion', 227.19679955772446, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 230.2015936803125), ('congestion', 230.2015936803125, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 232.5007609347748), ('congestion', 232.5007609347748, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 234.35659054439057), ('congestion', 234.35659054439057, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 237.23909119903928), ('congestion', 237.23909119903928, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 241.83211359168757), ('congestion', 241.83211359168757, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 245.52108959421915), ('congestion', 245.52108959421915, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 247.53135689521116), ('congestion', 247.53135689521116, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 249.92137273446198), ('congestion', 249.92137273446198, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 253.4188448185724), ('congestion', 253.4188448185724, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 255.59090273069936), ('congestion', 255.59090273069936, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 258.61477938170555), ('congestion', 258.61477938170555, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 262.87367994291344), ('congestion', 262.87367994291344, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 265.1767835398783), ('congestion', 265.1767835398783, 'agent_2', 'e_(3, 4)_(4, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9590>, 268.09914851577247), ('congestion', 268.09914851577247, 'agent_2', 'e_(4, 4)_(3, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348d9050>, 270.41030375642015), ('congestion', 270.41030375642015, 'agent_2', 'e_(3, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cfb50>, 274.309376793052), ('congestion', 274.309376793052, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 275.94304048382037), ('congestion', 275.94304048382037, 'agent_2', 'e_(1, 4)_(1, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf590>, 279.48556915009993), ('congestion', 279.48556915009993, 'agent_2', 'e_(1, 3)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 282.67352066875327), ('congestion', 282.6735206687532, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cfb50>, 284.73330386433935), ('congestion', 284.7333038643393, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 287.5309762589132), ('congestion', 287.5309762589132, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cfb50>, 289.69028904624145), ('congestion', 289.69028904624145, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 292.893604266552), ('congestion', 292.893604266552, 'agent_2', 'e_(1, 4)_(2, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cfb50>, 297.54505746410945), ('congestion', 297.54505746410945, 'agent_2', 'e_(2, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 299.9323444488939), ('congestion', 299.9323444488939, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 302.245170079429), ('congestion', 302.24517007942904, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348bc8d0>, 304.0426846075578), ('congestion', 304.0426846075578, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 306.9181133747898), ('congestion', 306.9181133747898, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 310.07751543704467), ('congestion', 310.07751543704467, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 312.95600917435746), ('congestion', 312.95600917435746, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 315.7182445183557), ('congestion', 315.7182445183557, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 318.85927255488303), ('congestion', 318.85927255488303, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 321.02298411870294), ('congestion', 321.0229841187029, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 322.62368879557164), ('congestion', 322.6236887955717, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 324.50976233619696), ('congestion', 324.50976233619696, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 327.17293344737715), ('congestion', 327.17293344737715, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 332.3946996990368), ('congestion', 332.3946996990367, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 335.04292674080597), ('congestion', 335.04292674080597, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348bc8d0>, 339.96669600076694), ('congestion', 339.96669600076694, 'agent_2', 'e_(0, 3)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 343.5841333040558), ('congestion', 343.5841333040558, 'agent_2', 'e_(0, 4)_(1, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf650>, 347.72920601430303), ('congestion', 347.72920601430303, 'agent_2', 'e_(1, 4)_(0, 4)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348caf50>, 349.8940501682537), ('congestion', 349.8940501682537, 'agent_2', 'e_(0, 4)_(0, 3)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348bc8d0>, 351.06085147577323), ('congestion', 351.0608514757733, 'agent_2', 'e_(0, 3)_(0, 2)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0337e2190>, 354.08936342349506), ('congestion', 354.08936342349506, 'agent_2', 'e_(0, 2)_(0, 1)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de5a410>, 357.35034341625857), ('congestion', 357.35034341625857, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de50690>, 359.3595072597811), ('congestion', 359.3595072597811, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf290>, 363.6384516941016), ('congestion', 363.6384516941016, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de50690>, 366.47265191985906), ('congestion', 366.47265191985906, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf290>, 369.4570605565223), ('congestion', 369.45706055652226, 'agent_2', 'e_(1, 0)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de50690>, 372.2425454623859), ('congestion', 372.2425454623859, 'agent_2', 'e_(0, 0)_(0, 1)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de5a410>, 375.38517010014647), ('congestion', 375.3851701001465, 'agent_2', 'e_(0, 1)_(0, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb04de50690>, 377.2742625571879), ('congestion', 377.27426255718797, 'agent_2', 'e_(0, 0)_(1, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf290>, 379.792759757523), ('congestion', 379.792759757523, 'agent_2', 'e_(1, 0)_(2, 0)', 0, 0), ('node', <rapport_topological.topological_map.TopologicalNode object at 0x7fb0348cf750>, 383.9247989622976)]}
...frames: 5715...
[DEBUG 15:49:44] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:44] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:44] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:44] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 15:49:45] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoy.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo TurAbdin' (SyrCOMTurAbdin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem Outline' (SyrCOMJerusalemOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin Outline' (SyrCOMNisibinOutline.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnanBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisr.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Antioch' (SyrCOMAntioch.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Talada' (SyrCOMTalada.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Adiabene' (SyrCOMAdiabene.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Quenneshrin' (SyrCOMQenNeshrin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemItalic.otf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalemBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Nisibin' (SyrCOMNisibin.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Batnan' (SyrCOMBatnan.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal 700 normal>) = 2.244090909090909
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Midyat' (SyrCOMMidyat.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Urhoy' (SyrCOMUrhoyBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.otf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Kharput' (SyrCOMKharput.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'East Syriac Ctesiphon' (SyrCOMCtesiphon.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirri.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Goha-Tibeb Zemen' (GohaTibebZemen.ttf) normal normal 500 normal>) = 10.145
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Malankara' (SyrCOMMalankara.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Estrangelo Edessa' (SyrCOMEdessa.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Serif' (luxirbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal 700 normal>) = 1.2440909090909091
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisb.ttf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Mardin' (SyrCOMMardinBold.otf) normal normal 700 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Serto Jerusalem' (SyrCOMJerusalem.otf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Sans' (luxisbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
[DEBUG 15:49:45] matplotlib.font_manager findfont: score(<Font 'Luxi Mono' (luximbi.ttf) oblique normal 700 normal>) = 11.335
[DEBUG 15:49:45] matplotlib.font_manager findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/alexrutherford/opt/anaconda3/envs/rapport/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:45] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:46] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:47] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:48] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:49] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:50] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:51] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:52] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:53] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:54] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:55] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:56] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
[DEBUG 15:49:57] matplotlib.axes._base top of axes not in the figure, so title not moved
